import os
import subprocess
import threading
import time
import signal
import requests
import hashlib
from flask import Flask, render_template, send_from_directory, abort, request, redirect, url_for, flash, jsonify
from flask_cors import CORS
from collections import deque # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import traceback # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode # URL ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import shutil # ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶Æ‡ßã‡¶õ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
DEFAULT_VIDEO_URL = "https://www.dropbox.com/scl/fi/2w5ai1fda804zfruoj8yn/assets_staytuned0.ts?rlkey=jixrs4b1v3keu4q6hpebmbw5v&st=b1teebao&raw=1"
DEFAULT_VIDEO_FILENAME = "default_video.ts"

VIDEO_DIR = "videos"
STREAM_OUTPUT_DIR = "stream_output"
MASTER_PLAYLIST_NAME = "stream.m3u8" # ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
HLS_MASTER_PLAYLIST_PATH = os.path.join(STREAM_OUTPUT_DIR, MASTER_PLAYLIST_NAME)

# --- ‡¶®‡¶§‡ßÅ‡¶®: ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
# ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü)
# ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: {'width': <px>, 'v_bitrate': '<kbps>k', 'a_bitrate': '<kbps>k', 'name': '<variant_name>'}
# ‡¶®‡¶æ‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶¨‡ßá
QUALITY_LEVELS = [
    {'width': 1280, 'v_bitrate': '2000k', 'a_bitrate': '128k', 'name': '720p'},
    {'width': 854,  'v_bitrate': '1000k', 'a_bitrate': '96k',  'name': '480p'},
    {'width': 640,  'v_bitrate': '600k',  'a_bitrate': '64k',  'name': '360p'},
]
FFMPEG_PRESET = 'veryfast' # ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶™‡¶ø‡¶° (ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow)
HLS_SEGMENT_DURATION = 4 # ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)
HLS_LIST_SIZE = 6 # ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
video_queue = deque()
played_today = set()
current_ffmpeg_process = None
stop_event = threading.Event()
stream_lock = threading.Lock() # ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç ffmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ï
currently_playing_url = None
default_video_path = None

app = Flask(__name__)
CORS(app) # ‡¶∏‡¶¨ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®
app.secret_key = os.urandom(24)

# --- ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ---
os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)

# --- Helper Functions (ensure_dropbox_raw_param, get_safe_filename, download_video) ---
# ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶®‡¶ø‡¶ö‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

def ensure_dropbox_raw_param(url):
    """
    URL ‡¶ü‡¶ø Dropbox ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶π‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßá‡¶∑‡ßá raw=1 ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶§‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡•§
    (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á)
    """
    try:
        if not url or not (url.startswith('http://') or url.startswith('https://')):
            return url
        parsed_url = urlparse(url)
        if parsed_url.netloc.lower() in ['www.dropbox.com', 'dropbox.com']:
            query_params = parse_qs(parsed_url.query)
            if not ('raw' in query_params and query_params['raw'] == ['1']):
                # print(f"üîß Dropbox URL ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá, 'raw=1' ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {url[:80]}...") # ‡¶ï‡¶Æ ‡¶≠‡¶æ‡¶∞‡ßç‡¶¨‡ßã‡¶∏ ‡¶≤‡¶ó‡¶ø‡¶Ç
                query_params['raw'] = ['1']
                new_query = urlencode(query_params, doseq=True)
                modified_url = urlunparse((
                    parsed_url.scheme, parsed_url.netloc, parsed_url.path,
                    parsed_url.params, new_query, parsed_url.fragment
                ))
                # print(f"   -> ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ URL: {modified_url[:80]}...")
                return modified_url
            else:
                 return url
        else:
            return url
    except Exception as e:
        print(f"‚ö†Ô∏è URL '{url[:80]}...' ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶¨‡¶æ ‡¶Æ‡¶°‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        return url


def get_safe_filename(url):
    """URL ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá (‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)"""
    """ (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) """
    try:
        parsed_url = urlparse(url)
        path_part = parsed_url.path
        base_name = os.path.basename(path_part)
        _, ext = os.path.splitext(base_name)
        hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10]
        if not ext or len(ext) > 5: ext = '.mp4'
        valid_exts = ['.mp4', '.ts', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.m3u8']
        if ext.lower() not in valid_exts: ext = '.mp4'
        return f"video_{hashed_url}{ext}"
    except Exception as e:
        print(f"‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ({url[:50]}...): {e}. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡ßá‡¶®‡ßá‡¶∞‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
        hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10]
        return f"video_{hashed_url}.mp4"


def download_video(url, output_filename):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá"""
    """ (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á, ‡¶§‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá ‡¶§‡ßá‡¶Æ‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) """
    filepath = os.path.join(VIDEO_DIR, output_filename)
    try:
        if os.path.exists(filepath):
            try:
                if os.path.getsize(filepath) > 0:
                    print(f"‚ÑπÔ∏è '{output_filename}' ({url[:50]}...) ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§")
                    return filepath
                else:
                    print(f"‚ö†Ô∏è '{output_filename}' ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
            except OSError as e:
                 print(f"‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ '{filepath}': {e}‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")

        print(f"‚è¨ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {url} -> {filepath}")
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, stream=True, timeout=60, headers=headers, allow_redirects=True)
        response.raise_for_status()

        content_type = response.headers.get('content-type', '').lower()
        problematic_types = ['text/html', 'application/json']
        is_likely_video = 'video' in content_type or 'mpegurl' in content_type or 'octet-stream' in content_type or not any(ptype in content_type for ptype in problematic_types)
        if not is_likely_video:
             print(f"‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: Content-Type '{content_type}' ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ ({url[:80]}...)")
             if 'dropbox.com' in url and 'raw=1' not in url:
                 print(f"   -> ‡¶è‡¶ü‡¶ø Dropbox ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ 'raw=1' ‡¶®‡ßá‡¶á‡•§ HTML ‡¶™‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")

        with open(filepath, "wb") as f:
            downloaded_size = 0
            for chunk in response.iter_content(chunk_size=8192 * 4):
                if stop_event.is_set():
                    print("üõë ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤‡•§")
                    if os.path.exists(filepath): os.remove(filepath)
                    return None
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)

        if downloaded_size == 0:
             print(f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡ß¶ ({filepath})‡•§")
             if os.path.exists(filepath): os.remove(filepath)
             return None

        print(f"‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá: {output_filename} (Size: {downloaded_size / (1024 * 1024):.2f} MB)")
        return filepath

    except requests.exceptions.Timeout:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ({url[:80]}...)")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ({url[:80]}...): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except Exception as e:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({url[:80]}...): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None

# --- ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§: FFmpeg Functions ---

def stop_ffmpeg_stream():
    """‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá"""
    """ (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) """
    global current_ffmpeg_process
    with stream_lock:
        process_to_stop = current_ffmpeg_process
        if process_to_stop and process_to_stop.poll() is None:
            print(f"‚è≥ FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (PID: {process_to_stop.pid})...")
            try:
                if os.name == 'nt': # ‡¶â‡¶á‡¶®‡ßç‡¶°‡ßã‡¶ú
                    subprocess.run(['taskkill', '/F', '/PID', str(process_to_stop.pid)], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                else: # ‡¶≤‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶∏/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ï
                    process_to_stop.terminate()
                    try:
                        process_to_stop.wait(timeout=5)
                    except subprocess.TimeoutExpired:
                        print("   -> FFmpeg terminate ‡¶π‡ßü‡¶®‡¶ø, SIGKILL ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        process_to_stop.kill()
                        process_to_stop.wait()
                print(f"   -> FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ (PID: {process_to_stop.pid}) ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            except Exception as e:
                print(f"‚ö†Ô∏è FFmpeg (PID: {process_to_stop.pid}) ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        elif process_to_stop:
             print(f"‚ÑπÔ∏è FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ (PID: {process_to_stop.pid}) ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶õ‡¶ø‡¶≤‡•§")

        if current_ffmpeg_process == process_to_stop:
             current_ffmpeg_process = None


# --- *** ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá *** ---
def start_ffmpeg_stream(video_path, loop=False):
    """
    ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü FFmpeg HLS ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡•§
    ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì libx264 ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶°‡¶ø‡¶ì AAC ‡¶§‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§
    """
    global current_ffmpeg_process

    abs_video_path = os.path.abspath(video_path)
    if not os.path.exists(abs_video_path):
        print(f"‚ùå FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {abs_video_path}")
        return None

    # ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
    stop_ffmpeg_stream()

    # --- ‡¶™‡ßÅ‡¶∞‡¶®‡ßã HLS ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ---
    print(f"üßπ ‡¶™‡ßÅ‡¶∞‡¶®‡ßã HLS ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ({STREAM_OUTPUT_DIR})...")
    try:
        if os.path.exists(STREAM_OUTPUT_DIR):
             # ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ì ‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®
             for item_name in os.listdir(STREAM_OUTPUT_DIR):
                 item_path = os.path.join(STREAM_OUTPUT_DIR, item_name)
                 try:
                     if os.path.isfile(item_path) or os.path.islink(item_path):
                         os.unlink(item_path)
                     elif os.path.isdir(item_path):
                         shutil.rmtree(item_path)
                 except Exception as e:
                     print(f"‚ö†Ô∏è ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ '{item_path}': {e}")
        else:
             os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True) # ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®

        # --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ---
        for level in QUALITY_LEVELS:
            level_dir = os.path.join(STREAM_OUTPUT_DIR, level['name'])
            os.makedirs(level_dir, exist_ok=True)
            print(f"   -> '{level_dir}' ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    except Exception as e:
        print(f"‚ö†Ô∏è ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return None # ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ

    # --- FFmpeg ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø ---
    ffmpeg_command_base = ['ffmpeg']

    # ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® (‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    if loop:
        ffmpeg_command_base.extend(['-stream_loop', '-1'])

    # ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶æ‡¶á‡¶≤
    ffmpeg_command_base.extend(['-i', abs_video_path])

    # ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏ (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    filter_complex_parts = []
    output_maps = []
    var_stream_map_parts = [] # ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

    # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≤‡ßá‡¶≠‡ßá‡¶≤, ‡¶§‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡¶æ‡¶ó‡ßá)
    split_outputs = "".join(f"[v{i}]" for i in range(len(QUALITY_LEVELS)))
    filter_complex_parts.append(f"[0:v]split={len(QUALITY_LEVELS)}{split_outputs}")

    # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßá‡¶≤‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶§‡ßà‡¶∞‡¶ø
    for i, level in enumerate(QUALITY_LEVELS):
        # ‡¶∏‡ßç‡¶ï‡ßá‡¶≤‡¶ø‡¶Ç: -2 ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá aspect ratio ‡¶†‡¶ø‡¶ï ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü
        filter_complex_parts.append(f"[v{i}]scale=w={level['width']}:h=-2[v{i}out]")
        # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç (‡¶è‡¶á ‡¶∏‡ßç‡¶ï‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì)
        output_maps.extend(['-map', f'[v{i}out]'])
        # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç (‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ö‡¶°‡¶ø‡¶ì - ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
        output_maps.extend(['-map', '0:a?']) # '?' ‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï
        # ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶§‡ßà‡¶∞‡¶ø (v:index,a:index,name:levelname)
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ i, ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏‡¶ì i (‡¶ï‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶π‡¶ö‡ßç‡¶õ‡ßá)
        var_stream_map_parts.append(f"v:{i},a:{i},name:{level['name']}")

    # ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶§‡ßà‡¶∞‡¶ø
    filter_complex_str = ";".join(filter_complex_parts)

    # ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏ (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    encoding_options = []
    for i, level in enumerate(QUALITY_LEVELS):
        encoding_options.extend([
            # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç (‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ i ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
            f'-c:v:{i}', 'libx264',
            f'-b:v:{i}', level['v_bitrate'],
            f'-preset:v:{i}', FFMPEG_PRESET,
            f'-profile:v:{i}', 'main', # ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶á‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤
            f'-level:v:{i}', '4.0',    # ‡¶≤‡ßá‡¶≠‡ßá‡¶≤
             '-g:v', str(HLS_SEGMENT_DURATION * 25), # GOP size (fps ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡ßá)
             '-keyint_min:v', str(HLS_SEGMENT_DURATION * 25),
             '-sc_threshold:v', '0',

            # ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç (‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ i ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
            f'-c:a:{i}', 'aac',
            f'-b:a:{i}', level['a_bitrate'],
            f'-ac:a:{i}', '2',      # ‡¶∏‡ßç‡¶ü‡ßá‡¶∞‡¶ø‡¶ì
            f'-ar:a:{i}', '44100',  # ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶≤ ‡¶∞‡ßá‡¶ü
        ])

    # HLS ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏
    hls_options = [
        '-f', 'hls',
        '-hls_time', str(HLS_SEGMENT_DURATION),
        '-hls_list_size', str(HLS_LIST_SIZE),
        '-hls_flags', 'delete_segments+omit_endlist+program_date_time',
        '-master_pl_name', MASTER_PLAYLIST_NAME, # ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
        # ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® (‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡¶π)
        '-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, '%v', 'segment_%05d.ts'),
        # ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ (‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
        '-var_stream_map', " ".join(var_stream_map_parts),
        # ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡¶æ‡¶• (‡¶Ø‡¶¶‡¶ø‡¶ì master_pl_name ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶è‡¶ü‡¶ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá)
         os.path.join(STREAM_OUTPUT_DIR, '%v', 'playlist.m3u8') # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶•
        # ‡¶¶‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶¨‡ßç‡¶Ø: ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶™‡¶æ‡¶•‡¶ü‡¶ø FFmpeg ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ `-master_pl_name` ‡¶¶‡¶ø‡¶≤‡ßá‡¶á ‡¶ö‡¶≤‡ßá‡•§
        # ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶æ‡¶• ‡¶∂‡ßá‡¶∑‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶®‡¶ø‡¶ö‡ßá ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶• ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§
    ]

    # ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ FFmpeg ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
    #ffmpeg_command = (
    #    ffmpeg_command_base +
    #    ['-filter_complex', filter_complex_str] +
    #    output_maps +
    #    encoding_options +
    #    hls_options +
    #    [HLS_MASTER_PLAYLIST_PATH] # ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶æ‡¶• ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    #)
    # ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶ó‡¶†‡¶®: hls_options ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡¶æ‡¶• ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    ffmpeg_command = (
       ffmpeg_command_base +
       ['-filter_complex', filter_complex_str] +
       output_maps +
       encoding_options +
       ['-f', 'hls'] +
       ['-hls_time', str(HLS_SEGMENT_DURATION)] +
       ['-hls_list_size', str(HLS_LIST_SIZE)] +
       ['-hls_flags', 'delete_segments+omit_endlist+program_date_time'] +
       ['-master_pl_name', MASTER_PLAYLIST_NAME] +
       ['-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, '%v', 'segment_%05d.ts')] +
       ['-var_stream_map', " ".join(var_stream_map_parts)] +
       [HLS_MASTER_PLAYLIST_PATH] # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
    )


    print("üöÄ FFmpeg ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° (‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç):")
    print("   ", " ".join(f'"{arg}"' if ' ' in arg else arg for arg in ffmpeg_command)) # ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∏‡¶π ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßã‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

    try:
        process = subprocess.Popen(ffmpeg_command, stderr=subprocess.PIPE, stdout=subprocess.DEVNULL)

        # stderr ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶•‡ßç‡¶∞‡ßá‡¶° (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
        def log_stderr(proc, path):
            if proc.stderr:
                try:
                    for line in iter(proc.stderr.readline, b''):
                        if stop_event.is_set(): break
                        line_str = line.decode('utf-8', errors='replace').strip()
                        if line_str:
                            # ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶∞‡¶∞ ‡¶¨‡¶æ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶≤‡¶ó ‡¶ï‡¶∞‡¶æ
                            keywords = ['error', 'failed', 'invalid', 'warning', 'unable', 'cannot']
                            if any(keyword in line_str.lower() for keyword in keywords):
                               print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                            # else: # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ ‡¶≤‡¶æ‡¶á‡¶® ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶®‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                            #    print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                except Exception as e:
                     print(f"‚ö†Ô∏è FFmpeg stderr ‡¶™‡ßú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
                finally:
                     if proc.stderr: proc.stderr.close()
            # print(f"  [FFmpeg stderr ‡¶∞‡¶ø‡¶°‡¶ø‡¶Ç ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ - {os.path.basename(path)}]")

        stderr_thread = threading.Thread(target=log_stderr, args=(process, video_path), daemon=True)
        stderr_thread.start()

        print(f"‚úÖ FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá (PID: {process.pid}) ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: {os.path.basename(video_path)} [‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç], ‡¶≤‡ßÅ‡¶™: {loop}")
        with stream_lock:
            current_ffmpeg_process = process
        return process

    except FileNotFoundError:
        print(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: 'ffmpeg' ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        with stream_lock: current_ffmpeg_process = None
        return None
    except Exception as e:
        print(f"‚ùå FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ({os.path.basename(video_path)}): {e}")
        traceback.print_exc() # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
        with stream_lock: current_ffmpeg_process = None
        return None


# --- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ (stream_manager) ---
# ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßú ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶• ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá
# start_ffmpeg_stream ‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá‡•§ start_ffmpeg_stream ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§
# ‡¶§‡¶¨‡ßá ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

def stream_manager():
    """
    ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡ßá, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡ßá‡•§
    (‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)
    """
    global currently_playing_url, default_video_path, current_ffmpeg_process

    print("‚è≥ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá...")
    modified_default_url = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
    temp_default_path = download_video(modified_default_url, DEFAULT_VIDEO_FILENAME)
    if temp_default_path:
         default_video_path = temp_default_path
         print(f"‚úÖ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§: {default_video_path}")
    else:
         print(f"üö® ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")

    predownload_attempted_for_url = None

    while not stop_event.is_set():
        next_video_path = None
        play_url = None
        loop_default = False
        stop_default_and_process_queue = False

        try:
            with stream_lock:
                ffmpeg_is_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
                current_url_snapshot = currently_playing_url
                modified_default_url_snapshot = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL) # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≤‡ßÅ‡¶™‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®

                # ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶® ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
                if ffmpeg_is_running:
                    if current_url_snapshot != modified_default_url_snapshot and video_queue:
                        next_url_in_queue_raw = video_queue[0]
                        next_url_in_queue_modified = ensure_dropbox_raw_param(next_url_in_queue_raw)
                        if next_url_in_queue_modified != predownload_attempted_for_url:
                            # print(f"üîé ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶ï: {next_url_in_queue_modified[:80]}...") # ‡¶ï‡¶Æ ‡¶≠‡¶æ‡¶∞‡ßç‡¶¨‡ßã‡¶∏
                            next_filename = get_safe_filename(next_url_in_queue_modified)
                            downloaded_path = download_video(next_url_in_queue_modified, next_filename)
                            # if downloaded_path: print(f"üëç ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: {next_filename}")
                            # else: print(f"üëé ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {next_url_in_queue_modified[:80]}...")
                            predownload_attempted_for_url = next_url_in_queue_modified
                    elif current_url_snapshot == modified_default_url_snapshot and video_queue:
                        print("üîÑ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤, ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        stop_default_and_process_queue = True
                        predownload_attempted_for_url = None
                    else:
                        if current_url_snapshot != modified_default_url_snapshot and not video_queue:
                            predownload_attempted_for_url = None
                        pass
                else: # FFmpeg ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ
                    predownload_attempted_for_url = None
                    if current_ffmpeg_process and current_ffmpeg_process.poll() is not None:
                        print(f"üèÅ FFmpeg (PID: {current_ffmpeg_process.pid}) ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                        if current_url_snapshot and current_url_snapshot != modified_default_url_snapshot:
                             played_today.add(current_url_snapshot)
                        current_ffmpeg_process = None
                        currently_playing_url = None

                    if video_queue:
                        raw_url_from_queue = video_queue.popleft()
                        play_url = ensure_dropbox_raw_param(raw_url_from_queue)
                        print(f"‚ñ∂Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {play_url[:80]}...")
                        filename = get_safe_filename(play_url)
                        next_video_path = download_video(play_url, filename)
                        if not next_video_path:
                            print(f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã: {play_url[:80]}...")
                            play_url = None
                            currently_playing_url = None
                        else:
                             loop_default = False
                             currently_playing_url = play_url
                    elif default_video_path:
                        if current_url_snapshot != modified_default_url_snapshot:
                             print("‚ÑπÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá (‡¶≤‡ßÅ‡¶™ ‡¶∏‡¶π)‡•§")
                        next_video_path = default_video_path
                        play_url = modified_default_url_snapshot
                        loop_default = True
                        currently_playing_url = play_url
                    else:
                        if current_url_snapshot:
                             print("‚è≥ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ...")
                        currently_playing_url = None
                        pass

            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®
            if stop_default_and_process_queue:
                print("üõë ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                stop_ffmpeg_stream()
                time.sleep(0.5)
                continue

            if next_video_path and play_url:
                # --- ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá ---
                print(f"üé¨ FFmpeg (‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü) ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: {os.path.basename(next_video_path)}, ‡¶≤‡ßÅ‡¶™: {loop_default}")
                started_process = start_ffmpeg_stream(next_video_path, loop=loop_default)
                if not started_process:
                     with stream_lock:
                         if currently_playing_url == play_url:
                             currently_playing_url = None
                             print(f"‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• URL '{play_url[:80]}...' ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶ó‡ßá‡¶≤‡ßã ‡¶®‡¶æ‡•§")

            # ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ
            if ffmpeg_is_running:
                 time.sleep(1)
            elif not next_video_path:
                 time.sleep(3)
            else:
                 time.sleep(0.5)

        except Exception as e:
             print(f"üö®üö® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e} üö®üö®")
             traceback.print_exc()
             try: stop_ffmpeg_stream()
             except Exception as stop_err: print(f"üö® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶™‡¶∞ FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá‡¶ì ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {stop_err}")
             with stream_lock:
                 currently_playing_url = None
                 predownload_attempted_for_url = None
             print("üîÅ ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
             time.sleep(5)

    print("üõë ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    stop_ffmpeg_stream()


# --- Flask Routes ---

# HTML ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú ('/') - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
@app.route('/')
def index():
    # index.html ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá ‡¶è‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® /stream/stream.m3u8 ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá
    return render_template('index.html')

# HTML ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ('/admin') - ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
@app.route('/admin')
def admin_panel():
    with stream_lock:
        queue_snapshot = list(video_queue) # ‡¶Ü‡¶∏‡¶≤ URL ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßá
        played_snapshot = list(played_today) # ‡¶Æ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶° URL ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßá
        current_url_snapshot = currently_playing_url # ‡¶Æ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶° URL
        is_ffmpeg_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
        status_detail = ""
        if is_ffmpeg_running and video_queue:
            next_in_queue_raw = video_queue[0]
            status_detail = f" | ‡¶è‡¶∞‡¶™‡¶∞: {next_in_queue_raw[:50]}..."

    modified_default_url = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
    if is_ffmpeg_running:
        # --- ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ---
        mode = "[‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç]" if current_url_snapshot != modified_default_url else "(‡¶≤‡ßÅ‡¶™, ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü)"
        if current_url_snapshot == modified_default_url:
            current_status = f"‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá {mode}{status_detail}"
        elif current_url_snapshot:
            current_status = f"‡¶ö‡¶≤‡¶õ‡ßá: {current_url_snapshot[:80]}... {mode}{status_detail}"
        else:
            current_status = "‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá (URL ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ, ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü)"
    else:
        current_status = "‚≠ï ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ"
        if video_queue:
             current_status += f" | ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡ßü: {video_queue[0][:50]}..."

    return render_template('admin.html',
                           queue=queue_snapshot,
                           current_status=current_status,
                           played=played_snapshot)

# HTML ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó ('/admin/add') - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
@app.route('/admin/add', methods=['POST'])
def add_video_form():
    url_from_form = request.form.get('video_url', '').strip()
    if url_from_form:
        if url_from_form.startswith('http://') or url_from_form.startswith('https://'):
            url_to_add = ensure_dropbox_raw_param(url_from_form)
            with stream_lock:
                if url_to_add in video_queue:
                     flash(f'"{url_to_add[:50]}..." ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶õ‡ßá‡•§', 'warning')
                else:
                    video_queue.append(url_to_add)
                    print(f"üì• [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url_to_add}")
                    flash(f'"{url_to_add[:50]}..." ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
            return redirect(url_for('admin_panel'))
        else:
            flash('‡¶Ö‡¶¨‡ßà‡¶ß URL!', 'error')
    else:
        flash('URL ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§', 'error')
    return redirect(url_for('admin_panel'))

# HTML ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ('/admin/clear_queue') - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
@app.route('/admin/clear_queue', methods=['POST'])
def clear_queue_form():
    with stream_lock:
        if video_queue:
            video_queue.clear()
            print("üóëÔ∏è [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            flash('‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
        else:
             flash('‡¶ï‡¶ø‡¶â ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤‡•§', 'info')
    return redirect(url_for('admin_panel'))

# HTML ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶≤‡ßá‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ('/admin/clear_played') - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
@app.route('/admin/clear_played', methods=['POST'])
def clear_played_form():
    with stream_lock:
        if played_today:
            played_today.clear()
            print("üóëÔ∏è [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] ‡¶™‡ßç‡¶≤‡ßá‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            flash("‡¶™‡ßç‡¶≤‡ßá‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", 'success')
        else:
             flash("‡¶™‡ßç‡¶≤‡ßá‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤‡•§", 'info')
    return redirect(url_for('admin_panel'))

# API Routes ('/add', '/delete') - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
@app.route('/add', methods=['GET'])
def add_video_api():
    url_from_request = request.args.get('link', '').strip()
    if not url_from_request:
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400
    if not (url_from_request.startswith('http://') or url_from_request.startswith('https://')):
        return jsonify({'status': 'error', 'message': 'Invalid URL format.', 'url': url_from_request}), 400
    url_to_add = ensure_dropbox_raw_param(url_from_request)
    with stream_lock:
        if url_to_add in video_queue:
            return jsonify({'status': 'warning', 'message': 'Video already in queue.', 'url': url_to_add}), 200
        else:
            video_queue.append(url_to_add)
            print(f"‚úÖ [API Add] ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url_to_add[:80]}...")
            return jsonify({'status': 'success', 'message': 'Video added to queue.', 'url': url_to_add}), 200

@app.route('/delete', methods=['GET'])
def delete_video_api():
    link_param = request.args.get('link', '').strip()
    if not link_param:
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400

    with stream_lock:
        if link_param.lower() == 'all':
            if video_queue:
                queue_len = len(video_queue)
                video_queue.clear()
                print(f"‚úÖ [API Delete] ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ({queue_len} ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ)‡•§")
                return jsonify({'status': 'success', 'message': f'Queue cleared. {queue_len} items removed.'}), 200
            else:
                return jsonify({'status': 'info', 'message': 'Queue was already empty.'}), 200
        else:
            url_from_request = link_param
            if not (url_from_request.startswith('http://') or url_from_request.startswith('https://')):
                 return jsonify({'status': 'error', 'message': 'Invalid URL format for deletion.', 'url': url_from_request}), 400
            url_to_delete = ensure_dropbox_raw_param(url_from_request)
            current_playing_modified = ensure_dropbox_raw_param(currently_playing_url) if currently_playing_url else None
            default_url_modified = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)

            if url_to_delete == current_playing_modified and url_to_delete != default_url_modified:
                 print(f"‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ({url_to_delete[:80]}...) ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§")
                 return jsonify({'status': 'error', 'message': 'Cannot delete the currently playing video.', 'url': url_to_delete}), 403

            try:
                video_queue.remove(url_to_delete)
                print(f"‚úÖ [API Delete] ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url_to_delete[:80]}...")
                return jsonify({'status': 'success', 'message': 'Video removed from queue.', 'url': url_to_delete}), 200
            except ValueError:
                print(f"‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ({url_to_delete[:80]}...)")
                return jsonify({'status': 'error', 'message': 'Video not found in queue.', 'url': url_to_delete}), 404


# --- HLS ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶® ('/stream/<path:filename>') ---
# ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® stream.m3u8 (‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü)
# ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø m3u8 ‡¶ì ts ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§
@app.route('/stream/<path:filename>')
def stream(filename):
    stream_abs_path = os.path.abspath(STREAM_OUTPUT_DIR)
    safe_base = os.path.normpath(stream_abs_path)
    # filename ‡¶è‡¶ñ‡¶® ‡¶∏‡¶æ‡¶¨-‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø Ìè¨Ìï® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá (e.g., 720p/segment_00001.ts)
    file_abs_path = os.path.normpath(os.path.join(safe_base, filename))

    # ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤ ‡¶∞‡ßã‡¶ß (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
    if not file_abs_path.startswith(safe_base):
        print(f"üö´ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶≤‡¶ô‡ßç‡¶ò‡¶® ‡¶™‡ßç‡¶∞‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ: {filename}")
        abort(403)

    # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
    if not os.path.isfile(file_abs_path):
        # print(f"üîç ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {file_abs_path}") # 404 ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï
        abort(404)

    try:
        response = send_from_directory(safe_base, filename, conditional=True)
        # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        return response
    except FileNotFoundError:
         abort(404)
    except Exception as e:
        print(f"‚ùå ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶´‡¶æ‡¶á‡¶≤ ({filename}) ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        abort(500)

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (signal_handler) ---
# ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á
def signal_handler(sig, frame):
    if stop_event.is_set(): return
    print("\nüö¶ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá...")
    stop_event.set()
    print("‚è≥ FFmpeg ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    print("üö¶ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá stop_ffmpeg_stream ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á, ‡¶ï‡¶æ‡¶∞‡¶£ stream_manager ‡¶è‡¶¨‡¶Ç finally ‡¶¨‡ßç‡¶≤‡¶ï ‡¶è‡¶ü‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§
    # ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø exit ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡•§
    # exit(0) # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶≤‡¶ï (__main__) ---
if __name__ == '__main__':
    print("*"*60)
    print("üöÄ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    # --- ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ---
    print("   ‚ú® ‡¶Æ‡ßã‡¶°: ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü HLS ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç")
    print(f"   üîß ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡¶∏: {[lvl['name'] for lvl in QUALITY_LEVELS]}")
    print("   üîß Dropbox URL-‡¶è ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü 'raw=1' ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá")
    print(f"‚è∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÇ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø: {os.path.abspath(VIDEO_DIR)}")
    print(f"üì∫ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø: {os.path.abspath(STREAM_OUTPUT_DIR)}")
    print(f"   üé¨ ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü: /{os.path.basename(STREAM_OUTPUT_DIR)}/{MASTER_PLAYLIST_NAME}")
    print("*"*60)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    manager_thread = threading.Thread(target=stream_manager, name="StreamManager", daemon=True)
    manager_thread.start()

    host = '0.0.0.0'
    port = 5000
    print(f"üåç Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ http://{host}:{port} ‡¶è ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§...")
    print(f"üîë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: http://127.0.0.1:{port}/admin")
    print(f"üëÄ ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®: http://127.0.0.1:{port}/")
    print(f"‚öôÔ∏è API Endpoints:")
    print(f"   - ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®: http://127.0.0.1:{port}/add?link=URL")
    print(f"   - ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: http://127.0.0.1:{port}/delete?link=URL")
    print(f"   - ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: http://127.0.0.1:{port}/delete?link=all")
    print("\nüõë ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá Ctrl+C ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")

    try:
        app.run(host=host, port=port, threaded=True, use_reloader=False, debug=False)
    except Exception as e:
        print(f"Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        traceback.print_exc()
    finally:
        print("\nFlask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        if not stop_event.is_set():
            print("   -> stop_event ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            stop_event.set()

        if manager_thread.is_alive():
            print("   -> ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ (‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)...")
            manager_thread.join(timeout=10)
            if manager_thread.is_alive():
                 print("‚ö†Ô∏è ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡ßü‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡¶®‡¶ø‡•§")

        print("   -> ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
        stop_ffmpeg_stream()

        print("üëã ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§‡•§")
