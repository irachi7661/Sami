import os
import subprocess
import threading
import time
import signal
import requests
import hashlib
from flask import Flask, render_template, send_from_directory, abort, request, redirect, url_for, flash
from flask_cors import CORS
from collections import deque # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import queue # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤)

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
DEFAULT_VIDEO_URL = "https://www.dropbox.com/scl/fi/2w5ai1fda804zfruoj8yn/assets_staytuned0.ts?rlkey=jixrs4b1v3keu4q6hpebmbw5v&st=b1teebao&raw=1"
DEFAULT_VIDEO_FILENAME = "default_video.ts"

VIDEO_DIR = "videos"
STREAM_OUTPUT_DIR = "stream_output"
HLS_OUTPUT_FILE = os.path.join(STREAM_OUTPUT_DIR, "stream.m3u8")

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
video_queue = deque()
played_today = set()
current_ffmpeg_process = None
stop_event = threading.Event()
stream_lock = threading.Lock() # ‡¶ï‡¶ø‡¶â, FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
currently_playing_url = None
default_video_path = None

# --- ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ---
next_video_url_to_download = None
next_video_download_path = None
next_video_download_thread = None
next_video_ready_event = threading.Event() # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá
next_download_failed = False # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

app = Flask(__name__)
CORS(app)
app.secret_key = os.urandom(24)

# --- ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ---
os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)

# --- Helper Functions ---

def get_safe_filename(url):
    """URL ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá (‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)"""
    hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10]
    try:
        base_name = os.path.basename(url.split('?')[0])
        _, ext = os.path.splitext(base_name)
        if not ext or len(ext) > 5: ext = '.mp4'
    except Exception:
        ext = '.mp4'
    if ext.lower() not in ['.mp4', '.ts', '.mkv', '.avi', '.mov', '.wmv', '.flv']: ext = '.mp4'
    return f"video_{hashed_url}{ext}"

def download_video(url, output_filename, download_event=None, failure_flag_setter=None):
    """
    ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá‡•§
    ‡¶Ø‡¶¶‡¶ø download_event ‡¶ì failure_flag_setter ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü, ‡¶§‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡•§
    """
    filepath = os.path.join(VIDEO_DIR, output_filename)
    success = False
    try:
        if os.path.exists(filepath) and output_filename != DEFAULT_VIDEO_FILENAME:
            if os.path.getsize(filepath) > 0:
                print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] '{output_filename}' ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá‡•§")
                success = True
                return filepath # ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®

        print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ] {url[:70]}... -> {output_filename}")
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, stream=True, timeout=60, headers=headers, allow_redirects=True) # ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶¨‡¶æ‡ßú‡¶æ‡¶® ‡¶Ø‡¶æ‡ßü
        response.raise_for_status()

        with open(filepath, "wb") as f:
            downloaded_size = 0
            for chunk in response.iter_content(chunk_size=8192 * 4): # ‡¶ö‡¶æ‡¶ô‡ßç‡¶ï ‡¶∏‡¶æ‡¶á‡¶ú ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
                if stop_event.is_set():
                    print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤] {output_filename}")
                    if os.path.exists(filepath): os.remove(filepath)
                    return None
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)

        if downloaded_size == 0:
            print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•] ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡ß¶: {output_filename}")
            if os.path.exists(filepath): os.remove(filepath)
            return None

        print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤] {output_filename} (Size: {downloaded_size / (1024*1024):.2f} MB)")
        success = True
        return filepath

    except requests.exceptions.Timeout:
        print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü] {url[:70]}...")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except requests.exceptions.RequestException as e:
        print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•] {url[:70]}... : {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except Exception as e:
        print(f"  [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø] {url[:70]}... : {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    finally:
        # ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
        if download_event:
            if not success and failure_flag_setter:
                failure_flag_setter() # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
            download_event.set() # ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∏‡¶´‡¶≤ ‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶â‡¶≠‡ßü ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá‡¶á)

def download_next_video_thread_func(url, filename, event, lock):
    """‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    global next_download_failed
    print(f"  üöÄ ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ: {filename}")

    # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡¶æ ‡¶≤‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
    def set_failure_flag():
        with lock:
            global next_download_failed
            next_download_failed = True
            print(f"  ‚ùå ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§: {filename}")

    downloaded_path = download_video(url, filename, download_event=event, failure_flag_setter=set_failure_flag)

    if downloaded_path:
        print(f"  ‚úÖ ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: {filename}")
    else:
        # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá set_failure_flag ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        pass
        # ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü download_video ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ finally ‡¶¨‡ßç‡¶≤‡¶ï‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

def stop_ffmpeg_stream():
    """‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá"""
    global current_ffmpeg_process, currently_playing_url
    with stream_lock:
        process_to_stop = current_ffmpeg_process
        if process_to_stop:
            print(f"  [FFmpeg] ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (PID: {process_to_stop.pid})...")
            if process_to_stop.poll() is None:
                try:
                    process_to_stop.terminate()
                    process_to_stop.wait(timeout=3) # ‡¶ï‡¶Æ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
                except subprocess.TimeoutExpired:
                    print("  [FFmpeg] terminate ‡¶π‡ßü‡¶®‡¶ø, kill ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    process_to_stop.kill()
                    process_to_stop.wait()
                except Exception as e:
                    print(f"  [FFmpeg] ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            else:
                 print("  [FFmpeg] ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶ó‡ßá‡¶≤‡ßã ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¨‡¶®‡ßç‡¶ß‡•§")

            # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø‡¶á ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá registrado ‡¶•‡¶æ‡¶ï‡ßá
            if current_ffmpeg_process == process_to_stop:
                 current_ffmpeg_process = None
                 # currently_playing_url ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶†‡¶ø‡¶ï ‡¶®‡¶æ, ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶¨‡ßá

def start_ffmpeg_stream(video_path, loop=False):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá FFmpeg ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá"""
    global current_ffmpeg_process

    abs_video_path = os.path.abspath(video_path)
    if not os.path.exists(abs_video_path):
        print(f"‚ùå [FFmpeg] ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {abs_video_path}")
        return None

    ffmpeg_cmd_base = ['ffmpeg', '-re']
    if loop: ffmpeg_cmd_base.extend(['-stream_loop', '-1'])
    ffmpeg_cmd_base.extend(['-i', abs_video_path])

    ffmpeg_cmd_options = [
        '-c:v', 'libx264', '-preset', 'veryfast', '-tune', 'zerolatency',
        '-b:v', '1500k', '-maxrate', '1500k', '-bufsize', '3000k', '-g', '60',
        '-vf', 'scale=640:360',
        '-c:a', 'aac', '-b:a', '128k', '-ac', '2', '-ar', '44100',
        '-f', 'hls', '-hls_time', '4', '-hls_list_size', '5',
        '-hls_flags', 'delete_segments+omit_endlist',
        '-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, 'segment%03d.ts'),
        HLS_OUTPUT_FILE
    ]
    ffmpeg_command = ffmpeg_cmd_base + ffmpeg_cmd_options

    print(f"üöÄ [FFmpeg] ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: {' '.join(ffmpeg_command)}")
    try:
        process = subprocess.Popen(ffmpeg_command, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)

        def log_stderr(proc, path):
            if proc.stderr:
                for line in iter(proc.stderr.readline, b''):
                    if stop_event.is_set(): break
                    line_str = line.decode(errors='ignore').strip()
                    # if line_str and ('frame=' in line_str or 'error' in line_str.lower()): # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
                    if line_str:
                        print(f"    [ffmpeg-{proc.pid}] {line_str}")
            print(f"    [ffmpeg-{proc.pid} stderr ‡¶∞‡¶ø‡¶°‡¶ø‡¶Ç ‡¶∂‡ßá‡¶∑]")

        stderr_thread = threading.Thread(target=log_stderr, args=(process, video_path), daemon=True)
        stderr_thread.start()

        print(f"‚úÖ [FFmpeg] ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá (PID: {process.pid}) ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: {os.path.basename(video_path)}, ‡¶≤‡ßÅ‡¶™: {loop}")
        with stream_lock:
            current_ffmpeg_process = process
        return process

    except FileNotFoundError:
        print(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: 'ffmpeg' ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        with stream_lock: current_ffmpeg_process = None
        return None
    except Exception as e:
        print(f"‚ùå [FFmpeg] ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ({os.path.basename(video_path)}): {e}")
        with stream_lock: current_ffmpeg_process = None
        return None

# --- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ (‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶∏‡¶π) ---
def stream_manager():
    """
    ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡ßá, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡ßá‡•§
    ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡•§
    """
    global currently_playing_url, default_video_path, current_ffmpeg_process
    global next_video_url_to_download, next_video_download_path, next_video_download_thread, next_video_ready_event, next_download_failed

    print("‚è≥ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá...")
    temp_default_path = download_video(DEFAULT_VIDEO_URL, DEFAULT_VIDEO_FILENAME)
    if temp_default_path:
        default_video_path = temp_default_path
        print(f"‚úÖ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§: {default_video_path}")
    else:
        print("üö® ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")

    while not stop_event.is_set():
        try:
            # --- ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ---
            current_video_path_to_play = None
            url_to_play = None
            play_looped = False
            start_next_download_info = None # (url, filename) Tuple

            with stream_lock:
                ffmpeg_is_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None

                # --- ‡¶ï‡ßá‡¶∏ ‡ßß: FFmpeg ‡¶ö‡¶≤‡¶õ‡ßá ---
                if ffmpeg_is_running:
                    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶æ‡¶™‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
                    if currently_playing_url == DEFAULT_VIDEO_URL and video_queue:
                        print("üîÑ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        stop_ffmpeg_stream() # ‡¶≤‡¶ï ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                        ffmpeg_is_running = False # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                        # ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶≤‡ßá, ‡¶§‡¶æ‡¶ï‡ßá‡¶ì ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞? ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶ø‡•§
                        if next_video_download_thread and next_video_download_thread.is_alive():
                             print("  ‚ö†Ô∏è ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶ö‡¶≤‡¶§‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶∏‡ßá‡¶ü‡¶æ‡¶á ‡¶π‡ßü)...")

                    else:
                        # FFmpeg ‡¶ö‡¶≤‡¶õ‡ßá, ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø
                        # (‡¶Ø‡¶¶‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡¶æ ‡¶π‡ßü)
                        if currently_playing_url != DEFAULT_VIDEO_URL and not next_video_url_to_download and video_queue:
                             peek_next_url = video_queue[0] # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®, ‡¶§‡ßÅ‡¶≤‡¶¨‡ßá‡¶® ‡¶®‡¶æ
                             next_filename = get_safe_filename(peek_next_url)
                             print(f"  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ({peek_next_url[:70]}...) ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø‡•§")
                             # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶≤‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
                             start_next_download_info = (peek_next_url, next_filename)
                             next_video_url_to_download = peek_next_url # ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                             next_video_download_path = os.path.join(VIDEO_DIR, next_filename)

                        time.sleep(0.5) # FFmpeg ‡¶ö‡¶≤‡¶≤‡ßá ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ
                        continue # ‡¶≤‡ßÅ‡¶™‡ßá‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶®

                # --- ‡¶ï‡ßá‡¶∏ ‡ß®: FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá ‡¶¨‡¶æ‡∏û‡∏∂‡πà‡∏á ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá ---
                else:
                    # ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                    if current_ffmpeg_process and current_ffmpeg_process.poll() is not None:
                        print(f"üèÅ FFmpeg (PID: {current_ffmpeg_process.pid}) ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                        if currently_playing_url and currently_playing_url != DEFAULT_VIDEO_URL:
                            played_today.add(currently_playing_url)
                        current_ffmpeg_process = None
                        # currently_playing_url ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá ‡¶®‡¶æ, ‡¶®‡¶ø‡¶ö‡ßá ‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶π‡ßü

                    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
                    # --- ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ: ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ---
                    if next_video_url_to_download and next_video_download_path:
                        print(f"  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {os.path.basename(next_video_download_path)}")
                        is_ready = next_video_ready_event.wait(timeout=0.1) # ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶∞‡ßá‡¶°‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ

                        if not is_ready and next_video_download_thread and next_video_download_thread.is_alive():
                             print("  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá, ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)...")
                             next_video_download_thread.join(timeout=10) # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ
                             is_ready = next_video_ready_event.is_set() # ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï

                        if is_ready:
                            print(f"  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü, ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
                            if not next_download_failed and os.path.exists(next_video_download_path) and os.path.getsize(next_video_download_path) > 0:
                                print(f"  ‚úÖ [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§: {os.path.basename(next_video_download_path)}")
                                current_video_path_to_play = next_video_download_path
                                url_to_play = next_video_url_to_download
                                play_looped = False
                                # ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                                next_video_url_to_download = None
                                next_video_download_path = None
                                next_video_download_thread = None
                                next_video_ready_event.clear()
                                next_download_failed = False
                            else:
                                print(f"  ‚ùå [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§: {next_video_url_to_download[:70]}...")
                                # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶´‡ßç‡¶≤‡ßã‡¶§‡ßá ‡¶Ø‡¶æ‡¶®
                                next_video_url_to_download = None
                                next_video_download_path = None
                                next_video_download_thread = None
                                next_video_ready_event.clear()
                                next_download_failed = False
                                # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá continue ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡¶ø‡¶â ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡¶ø‡¶®
                        else:
                             print("  ‚ö†Ô∏è [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ì ‡¶∞‡ßá‡¶°‡¶ø ‡¶π‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
                             # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                             next_video_url_to_download = None
                             next_video_download_path = None
                             # ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶ö‡¶≤‡¶§‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ? ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶ö‡¶≤‡¶§‡ßá ‡¶¶‡ßá‡¶á‡•§
                             # next_video_download_thread = None # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶π‡¶æ‡¶∞‡¶æ‡¶¨‡ßá‡¶®
                             next_video_ready_event.clear()
                             next_download_failed = False
                             # ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡¶ø‡¶â ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡¶ø‡¶®

                    # --- ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü ‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü) ---
                    if not current_video_path_to_play and video_queue:
                         url_to_play = video_queue.popleft()
                         print(f"‚ñ∂Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url_to_play[:70]}...")
                         filename = get_safe_filename(url_to_play)
                         # ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                         print(f"  ‚è≥ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {filename}")
                         sync_download_path = download_video(url_to_play, filename)
                         if sync_download_path:
                             print(f"  ‚úÖ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤: {filename}")
                             current_video_path_to_play = sync_download_path
                             play_looped = False
                         else:
                             print(f"  ‚ùå ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {url_to_play[:70]}...")
                             url_to_play = None # ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
                             continue # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶Ø‡¶æ‡¶®

                    # --- ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ: ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì (‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá) ---
                    elif not current_video_path_to_play and default_video_path:
                        print("‚ÑπÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
                        current_video_path_to_play = default_video_path
                        url_to_play = DEFAULT_VIDEO_URL
                        play_looped = True

                    # --- ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ---
                    elif not current_video_path_to_play:
                        print("‚è≥ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡ßá‡¶á‡•§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ...")
                        time.sleep(5)
                        continue

            # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶´‡ßá‡¶ú (‡¶≤‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá) ---

            # ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
            if current_video_path_to_play and url_to_play:
                 with stream_lock: # currently_playing_url ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ï ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞
                     currently_playing_url = url_to_play
                 # FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
                 started_process = start_ffmpeg_stream(current_video_path_to_play, loop=play_looped)

                 if started_process:
                     # FFmpeg ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶≤‡ßá, ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
                     if not play_looped: # ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡¶æ ‡¶π‡ßü
                         with stream_lock:
                             if video_queue and not next_video_url_to_download: # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
                                 peek_next_url = video_queue[0]
                                 next_filename = get_safe_filename(peek_next_url)
                                 print(f"  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ({peek_next_url[:70]}...) ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø‡•§")
                                 start_next_download_info = (peek_next_url, next_filename)
                                 next_video_url_to_download = peek_next_url
                                 next_video_download_path = os.path.join(VIDEO_DIR, next_filename)
                     time.sleep(1) # FFmpeg ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶®
                 else:
                     # FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá, URL ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                     with stream_lock:
                         currently_playing_url = None
                     time.sleep(3) # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ

            # ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡ßá (‡¶≤‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã)
            if start_next_download_info:
                 next_url, next_file = start_next_download_info
                 with stream_lock: # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
                     # ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ‡¶∞ ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                     next_video_ready_event.clear()
                     next_download_failed = False
                     # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
                     next_video_download_thread = threading.Thread(
                         target=download_next_video_thread_func,
                         args=(next_url, next_file, next_video_ready_event, stream_lock), # ‡¶≤‡¶ï ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                         daemon=True # ‡¶°‡ßá‡¶á‡¶Æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø‡¶ì ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
                     )
                     next_video_download_thread.start()
                     print(f"  [‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°] ‡¶•‡ßç‡¶∞‡ßá‡¶° '{next_video_download_thread.name}' ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {next_file}")


        except Exception as e:
            print(f"üö®üö® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e} üö®üö®")
            import traceback
            traceback.print_exc()
            # ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶π‡¶≤‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
            # stop_event.set()
            time.sleep(10) # ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶™‡¶∞ ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ

    # --- ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ---
    print("üõë ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá
    stop_ffmpeg_stream()
    # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶≤‡ßá, ‡¶§‡¶æ‡¶ï‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá,
    # ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶°‡ßá‡¶á‡¶Æ‡¶® ‡¶π‡¶ì‡ßü‡¶æ‡ßü ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá‡•§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
    # if next_video_download_thread and next_video_download_thread.is_alive():
    #    print("  ‚è≥ ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ...")
    #    next_video_download_thread.join(timeout=5)

# --- Flask Routes (No changes needed here, kept for completeness) ---
@app.route('/')
def index():
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá"""
    return render_template('index.html')

@app.route('/admin')
def admin_panel():
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    with stream_lock: # ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡¶ì ‡¶≤‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶
        queue_snapshot = list(video_queue)
        played_snapshot = list(played_today)
        current_url_snapshot = currently_playing_url
        is_ffmpeg_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
        next_downloading = next_video_url_to_download

    if is_ffmpeg_running:
        if current_url_snapshot == DEFAULT_VIDEO_URL:
            current_status = "‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá (‡¶≤‡ßÅ‡¶™)"
        elif current_url_snapshot:
            current_status = f"‡¶ö‡¶≤‡¶õ‡ßá: {current_url_snapshot[:80]}..."
        else:
            current_status = "‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá (URL ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ)"
    else:
        current_status = "‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ"

    if next_downloading:
         current_status += f" | ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶ø‡¶Ç: {next_downloading[:60]}..."

    return render_template('admin.html',
                           queue=queue_snapshot,
                           current_status=current_status,
                           played=played_snapshot)

@app.route('/admin/add', methods=['POST'])
def add_video():
    """‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì URL ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá"""
    url = request.form.get('video_url')
    if url:
        if url.startswith('http://') or url.startswith('https://'):
            with stream_lock:
                video_queue.append(url)
                print(f"üì• ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url}")
                flash(f'"{url[:50]}..." ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
            return redirect(url_for('admin_panel'))
        else:
            flash('‡¶Ö‡¶¨‡ßà‡¶ß URL! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá http:// ‡¶¨‡¶æ https:// ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶¶‡¶ø‡¶®‡•§', 'error')
    else:
        flash('URL ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§', 'error')
    return redirect(url_for('admin_panel'))

@app.route('/admin/clear_queue', methods=['POST'])
def clear_queue():
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßá"""
    with stream_lock:
        video_queue.clear()
        # ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§?
        global next_video_url_to_download, next_video_download_path, next_video_download_thread, next_download_failed
        next_video_url_to_download = None
        next_video_download_path = None
        # ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶æ‡¶™‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶†‡¶ø‡¶®, ‡¶§‡¶¨‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
        next_video_ready_event.clear()
        next_download_failed = False
        print("üóëÔ∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        flash('‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
    return redirect(url_for('admin_panel'))

@app.route('/admin/clear_played', methods=['POST'])
def clear_played():
    """'‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßá"""
    with stream_lock:
        played_today.clear()
        print("üóëÔ∏è '‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        flash("'‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", 'success')
    return redirect(url_for('admin_panel'))

@app.route('/stream/<path:filename>')
def stream(filename):
    """HLS ‡¶´‡¶æ‡¶á‡¶≤ (.m3u8, .ts) ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠ ‡¶ï‡¶∞‡ßá"""
    stream_abs_path = os.path.abspath(STREAM_OUTPUT_DIR)
    file_abs_path = os.path.abspath(os.path.join(stream_abs_path, filename))
    if not file_abs_path.startswith(stream_abs_path): abort(404)
    if not os.path.exists(file_abs_path): abort(404)

    response = send_from_directory(stream_abs_path, filename, conditional=True)
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
def signal_handler(sig, frame):
    print("\nüö¶ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá (Ctrl+C)...")
    stop_event.set() # ‡¶∏‡¶¨ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶π)
    print("‚è≥ FFmpeg ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    time.sleep(2)
    print("üëã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    os._exit(0)

# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶≤‡¶ï ---
if __name__ == '__main__':
    print("üöÄ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    print(f"‚è∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü: {time.strftime('%Y-%m-%d %H:%M:%S')} ({time.tzname[0]})")
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    manager_thread = threading.Thread(target=stream_manager, name="StreamManager", daemon=True)
    manager_thread.start()

    print(f"üåç Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá http://0.0.0.0:5000 ‡¶è...")
    print(f"üîë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: http://127.0.0.1:5000/admin (‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶™‡¶ø)")
    app.run(host='0.0.0.0', port=5000, threaded=True, use_reloader=False, debug=False)

    print("Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    stop_event.set()
    if manager_thread.is_alive():
        manager_thread.join(timeout=5)
    stop_ffmpeg_stream()
    print("‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
