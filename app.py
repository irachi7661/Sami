import os
import subprocess
import threading
import time
import signal
import requests
import hashlib
import json # ffprobe ржерзЗржХрзЗ ржЖржЙржЯржкрзБржЯ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржЬржирзНржп
from flask import Flask, render_template, send_from_directory, abort, request, redirect, url_for, flash, jsonify
from flask_cors import CORS
from collections import deque # ржнрж┐ржбрж┐ржУ ржХрж┐ржЙрзЯрзЗрж░ ржЬржирзНржп
import traceback # ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПрж░рж░ рж▓ржЧрж┐ржВ ржПрж░ ржЬржирзНржп
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode # URL ржкрж╛рж░рзНрж╕рж┐ржВ ржПрж░ ржЬржирзНржп
import shutil # ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп

# --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
DEFAULT_VIDEO_URL = "https://www.dropbox.com/scl/fi/2w5ai1fda804zfruoj8yn/assets_staytuned0.ts?rlkey=jixrs4b1v3keu4q6hpebmbw5v&st=b1teebao&raw=1"
DEFAULT_VIDEO_FILENAME = "default_video.ts"

VIDEO_DIR = "videos"
STREAM_OUTPUT_DIR = "stream_output"
# ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
MASTER_HLS_OUTPUT_FILE = os.path.join(STREAM_OUTPUT_DIR, "master.m3u8")

# ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ рж╕рзЗржЯрж┐ржВрж╕
TARGET_QUALITIES = [
    # {'height': 1080, 'vb': '4000k', 'ab': '192k', 'name': '1080p'}, # ржкрзНрж░рзЯрзЛржЬржи рж╣рж▓рзЗ ржпрзЛржЧ ржХрж░рзБржи
    {'height': 720, 'vb': '2500k', 'ab': '128k', 'name': '720p', 'preset': 'veryfast'},
    {'height': 480, 'vb': '1200k', 'ab': '96k', 'name': '480p', 'preset': 'veryfast'},
    {'height': 360, 'vb': '700k', 'ab': '64k', 'name': '360p', 'preset': 'veryfast'},
]
# ржпржЦржи ржнрж┐ржбрж┐ржУ ржХржкрж┐ ржХрж░рж╛ рж╣ржмрзЗ рждржЦржи ржЕржбрж┐ржУ ржмрж┐ржЯрж░рзЗржЯ ржХрж┐ рж╣ржмрзЗ (ржпржжрж┐ 480p ржмрж╛ ржХржо рж╣рзЯ ржЗржиржкрзБржЯ)
AUDIO_BITRATE_COPY_MODE = '128k'
COPY_THRESHOLD_HEIGHT = 480 # ржПржЗ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи ржмрж╛ ржПрж░ ржХржо рж╣рж▓рзЗ ржнрж┐ржбрж┐ржУ ржХржкрж┐ ржХрж░рж╛ рж╣ржмрзЗ

# ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзЗрж░рж┐рзЯрзЗржмрж▓
video_queue = deque()
played_today = set()
current_ffmpeg_process = None
stop_event = threading.Event()
stream_lock = threading.Lock() # ржХрж┐ржЙ ржПржмржВ ffmpeg ржкрзНрж░рж╕рзЗрж╕ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕рзЗрж░ ржЬржирзНржп рж▓ржХ
currently_playing_url = None
default_video_path = None
current_stream_is_multibitrate = False # ржмрж░рзНрждржорж╛ржирзЗ ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ ржЪрж▓ржЫрзЗ ржХрж┐ржирж╛

app = Flask(__name__)
CORS(app) # рж╕ржм ржбрзЛржорзЗржЗржи ржерзЗржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕рзЗрж░ ржЕржирзБржорждрж┐ ржжрж┐ржи
app.secret_key = os.urandom(24)

# --- ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ---
os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)

# --- Helper Functions ---

def ensure_dropbox_raw_param(url):
    """
    URL ржЯрж┐ Dropbox рж▓рж┐ржЩрзНржХ рж╣рж▓рзЗ ржПржмржВ рж╢рзЗрж╖рзЗ raw=1 ржирж╛ ржерж╛ржХрж▓рзЗ рждрж╛ ржпрзЛржЧ ржХрж░рзЗред
    """
    try:
        if not url or not (url.startswith('http://') or url.startswith('https://')):
            return url # ржЕржмрзИржз ржмрж╛ ржЦрж╛рж▓рж┐ URL рж╣рж▓рзЗ ржХрж┐ржЫрзБ ржирж╛ ржХрж░рзЗ ржлрзЗрж░ржд ржжрж┐ржи

        parsed_url = urlparse(url)

        # рж╣рзЛрж╕рзНржЯржирзЗржо ржЪрзЗржХ (www.dropbox.com ржмрж╛ dropbox.com)
        if parsed_url.netloc.lower() == 'www.dropbox.com' or parsed_url.netloc.lower() == 'dropbox.com':
            query_params = parse_qs(parsed_url.query) # ржмрж░рзНрждржорж╛ржи ржХрзЛрзЯрзЗрж░рж┐ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржкрж╛рж░рзНрж╕ ржХрж░рзБржи

            # raw=1 ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
            if not ('raw' in query_params and query_params['raw'] == ['1']):
                print(f"ЁЯФз Dropbox URL рж╕ржирж╛ржХрзНржд рж╣рзЯрзЗржЫрзЗ, 'raw=1' ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {url[:80]}...")
                query_params['raw'] = ['1'] # raw=1 ржпрзЛржЧ ржмрж╛ ржЖржкржбрзЗржЯ ржХрж░рзБржи

                # ржирждрзБржи ржХрзЛрзЯрзЗрж░рж┐ рж╕рзНржЯрзНрж░рж┐ржВ рждрзИрж░рж┐ ржХрж░рзБржи
                new_query = urlencode(query_params, doseq=True)

                # рж╕ржорзНржкрзВрж░рзНржг URL ржЖржмрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
                modified_url = urlunparse((
                    parsed_url.scheme,
                    parsed_url.netloc,
                    parsed_url.path,
                    parsed_url.params,
                    new_query,
                    parsed_url.fragment
                ))
                print(f"   -> ржкрж░рж┐ржмрж░рзНрждрж┐ржд URL: {modified_url[:80]}...")
                return modified_url
            else:
                 # raw=1 ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЖржЫрзЗ
                 return url
        else:
            # Dropbox URL ржирзЯ
            return url
    except Exception as e:
        print(f"тЪая╕П URL '{url[:80]}...' ржкрж╛рж░рзНрж╕ ржмрж╛ ржоржбрж┐ржлрж╛ржЗ ржХрж░рж╛рж░ рж╕ржорзЯ рждрзНрж░рзБржЯрж┐: {e}")
        return url # рждрзНрж░рзБржЯрж┐ рж╣рж▓рзЗ ржЖрж╕рж▓ URL ржлрзЗрж░ржд ржжрж┐ржи

def get_safe_filename(url):
    """URL ржерзЗржХрзЗ ржПржХржЯрж┐ ржирж┐рж░рж╛ржкржж ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рзЗ (рж╣рзНржпрж╛рж╢ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ)"""
    try:
        parsed_url = urlparse(url)
        path_part = parsed_url.path
        base_name = os.path.basename(path_part)
        _, ext = os.path.splitext(base_name)

        # Use SHA1 hash of the *full* URL (including query params) for uniqueness
        hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10]

        if not ext or len(ext) > 5:
             ext = '.mp4' # ржбрж┐ржлрж▓рзНржЯ ржПржХрзНрж╕ржЯрзЗржирж╢ржи

        # ржЧрзНрж░рж╣ржгржпрзЛржЧрзНржп ржнрж┐ржбрж┐ржУ ржПржХрзНрж╕ржЯрзЗржирж╢ржи ржЪрзЗржХ
        if ext.lower() not in ['.mp4', '.ts', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.m3u8']:
             ext = '.mp4' # ржЕржЧрзНрж░рж╣ржгржпрзЛржЧрзНржп рж╣рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ

        return f"video_{hashed_url}{ext}"
    except Exception as e:
        print(f"тЪая╕П ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛ ({url[:50]}...): {e}. ржПржХржЯрж┐ ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")
        # Fallback to hashing the raw url if parsing fails
        hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10]
        return f"video_{hashed_url}.mp4"


def download_video(url, output_filename):
    """ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ"""
    filepath = os.path.join(VIDEO_DIR, output_filename)
    try:
        # ржлрж╛ржЗрж▓ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржерж╛ржХрж▓рзЗ ржПржмржВ ржЦрж╛рж▓рж┐ ржирж╛ рж╣рж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржи
        if os.path.exists(filepath):
            try:
                if os.path.getsize(filepath) > 0:
                    print(f"тД╣я╕П '{output_filename}' ({url[:50]}...) ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржЖржЫрзЗ ржПржмржВ ржЦрж╛рж▓рж┐ ржирзЯред")
                    return filepath
                else:
                    print(f"тЪая╕П '{output_filename}' ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЫрж┐рж▓ ржХрж┐ржирзНрждрзБ ржЦрж╛рж▓рж┐ред ржЖржмрж╛рж░ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")
            except OSError as e:
                 print(f"тЪая╕П ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ ржЪрзЗржХ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ '{filepath}': {e}ред ржЖржмрж╛рж░ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")

        print(f"тПм ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ: {url} -> {filepath}")
        # ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ рж╕рзЗржЯ ржХрж░рж╛, ржХрж┐ржЫрзБ рж╕рж╛рж░рзНржнрж╛рж░ ржмржЯ ржмрзНрж▓ржХ ржХрж░рзЗ
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, stream=True, timeout=60, headers=headers, allow_redirects=True) # рж░рж┐ржбрж╛ржЗрж░рзЗржХрзНржЯ ржлрж▓рзЛ ржХрж░рзБржи
        response.raise_for_status() # HTTP ржПрж░рж░ ржЪрзЗржХ

        # Content-Type ржЪрзЗржХ (рж╕ржорзНржнрж╛ржмрзНржп ржиржи-ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ рж╕ржирж╛ржХрзНржд ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛)
        content_type = response.headers.get('content-type', '').lower()
        problematic_types = ['text/html', 'application/json'] # ржПржЧрзБрж▓рзЛ ржнрж┐ржбрж┐ржУ рж╣ржУрзЯрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржХржо
        is_likely_video = 'video' in content_type or 'mpegurl' in content_type or 'octet-stream' in content_type or not any(ptype in content_type for ptype in problematic_types)

        if not is_likely_video:
             print(f"тЪая╕П рж╕рждрж░рзНржХрждрж╛: Content-Type '{content_type}' ржнрж┐ржбрж┐ржУ ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржирж╛ ({url[:80]}...) ред ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
             if 'dropbox.com' in url and 'raw=1' not in url:
                 print(f"   -> ржПржЯрж┐ Dropbox рж▓рж┐ржЩрзНржХ ржХрж┐ржирзНрждрзБ 'raw=1' ржирзЗржЗред рж╕ржорзНржнржмржд HTML ржкрзЗржЬ ржбрж╛ржЙржирж▓рзЛржб рж╣ржмрзЗред")

        # ржлрж╛ржЗрж▓ рж▓рзЗржЦрж╛
        with open(filepath, "wb") as f:
            downloaded_size = 0
            for chunk in response.iter_content(chunk_size=8192 * 4): # ржЪрж╛ржЩрзНржХ рж╕рж╛ржЗржЬ ржмрж╛рзЬрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ
                if stop_event.is_set(): # ржЕрзНржпрж╛ржк ржмржирзНржз рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржмрж╛рждрж┐рж▓
                    print("ЁЯЫС ржбрж╛ржЙржирж▓рзЛржб ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ (ржЕрзНржпрж╛ржк ржмржирзНржз)ред")
                    if os.path.exists(filepath): os.remove(filepath)
                    return None
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)

        # ржбрж╛ржЙржирж▓рзЛржб рж╢рзЗрж╖рзЗ ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ ржЪрзЗржХ
        if downloaded_size == 0:
             print(f"тЭМ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирзНрждрзБ ржлрж╛ржЗрж▓рзЗрж░ рж╕рж╛ржЗржЬ рзж ({filepath})ред рж╕ржорзНржнржмржд рж╕ржорж╕рзНржпрж╛ ржЖржЫрзЗред")
             if os.path.exists(filepath): os.remove(filepath) # ржЦрж╛рж▓рж┐ ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
             return None

        print(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣рзЯрзЗржЫрзЗ: {output_filename} (Size: {downloaded_size / (1024 * 1024):.2f} MB)")
        return filepath

    except requests.exceptions.Timeout:
        print(f"тЭМ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржЯрж╛ржЗржоржЖржЙржЯ ({url[:80]}...)")
        if os.path.exists(filepath): os.remove(filepath) # ржмрзНржпрж░рзНрже рж╣рж▓рзЗ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ
        return None
    except requests.exceptions.SSLError as e:
        print(f"тЭМ SSL рждрзНрж░рзБржЯрж┐ ({url[:80]}...): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except requests.exceptions.RequestException as e:
        print(f"тЭМ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржмрзНржпрж░рзНрже ({url[:80]}...): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except Exception as e:
        print(f"тЭМ ржнрж┐ржбрж┐ржУ рж╕ржВрж░ржХрзНрж╖ржг ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ рждрзНрж░рзБржЯрж┐ ({url[:80]}...): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None

def get_video_resolution(video_path):
    """ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи (ржЙржЪрзНржЪрждрж╛) ржкрзЗрждрзЗ ffprobe ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ"""
    try:
        command = [
            'ffprobe',
            '-v', 'error',             # рж╢рзБржзрзБржорж╛рждрзНрж░ ржПрж░рж░ ржжрзЗржЦрж╛ржи
            '-select_streams', 'v:0',   # ржкрзНрж░ржержо ржнрж┐ржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
            '-show_entries', 'stream=width,height', # ржкрзНрж░рж╕рзНрже ржПржмржВ ржЙржЪрзНржЪрждрж╛ ржжрзЗржЦрж╛ржи
            '-of', 'json',             # ржЖржЙржЯржкрзБржЯ ржлрж░ржорзНржпрж╛ржЯ JSON
            video_path
        ]
        result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=30)
        data = json.loads(result.stdout)

        if 'streams' in data and len(data['streams']) > 0 and 'height' in data['streams'][0]:
            height = data['streams'][0]['height']
            width = data['streams'][0].get('width', 0) # ржкрзНрж░рж╕рзНржержУ ржкрж╛ржУрзЯрж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
            print(f"тД╣я╕П ржнрж┐ржбрж┐ржУ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕ржирж╛ржХрзНржд рж╣рзЯрзЗржЫрзЗ: {width}x{height}")
            return height
        else:
            print(f"тЪая╕П ffprobe ржЖржЙржЯржкрзБржЯрзЗ ржнрж┐ржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржмрж╛ ржЙржЪрзНржЪрждрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ ({os.path.basename(video_path)})")
            return None
    except FileNotFoundError:
        print("тЭМ рждрзНрж░рзБржЯрж┐: 'ffprobe' ржХржорж╛ржирзНржб ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред FFmpeg ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ ржЖржЫрзЗ ржПржмржВ PATH ржП ржпрзЛржЧ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред")
        return None
    except subprocess.CalledProcessError as e:
        print(f"тЭМ ffprobe ржЪрж╛рж▓рж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ ({os.path.basename(video_path)}): {e}")
        print(f"   stderr: {e.stderr}")
        return None
    except subprocess.TimeoutExpired:
        print(f"тЭМ ffprobe ржЯрж╛ржЗржоржЖржЙржЯ ({os.path.basename(video_path)})")
        return None
    except json.JSONDecodeError:
        print(f"тЭМ ffprobe JSON ржЖржЙржЯржкрзБржЯ ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ ({os.path.basename(video_path)})")
        return None
    except Exception as e:
        print(f"тЭМ ржнрж┐ржбрж┐ржУ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи ржкрзЗрждрзЗ ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐ ({os.path.basename(video_path)}): {e}")
        return None


def stop_ffmpeg_stream():
    """ржЪрж▓ржорж╛ржи FFmpeg ржкрзНрж░рж╕рзЗрж╕ ржирж┐рж░рж╛ржкржжрзЗ ржмржирзНржз ржХрж░рзЗ"""
    global current_ffmpeg_process, current_stream_is_multibitrate
    with stream_lock: # рж▓ржХ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи
        process_to_stop = current_ffmpeg_process
        if process_to_stop and process_to_stop.poll() is None: # ржкрзНрж░рж╕рзЗрж╕ ржХрж┐ рж╕рждрзНржпрж┐ржЗ ржЪрж▓ржЫрзЗ?
            print(f"тП│ FFmpeg ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (PID: {process_to_stop.pid})...")
            try:
                if os.name == 'nt': # ржЙржЗржирзНржбрзЛржЬрзЗрж░ ржЬржирзНржп
                    # SIGINT ржкрж╛ржарж╛ржирзЛрж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ ржнрж╛рж▓рзЛ, taskkill ржЦрзБржм ржЬрзЛрж░ ржХрж░рзЗ ржмржирзНржз ржХрж░рзЗ
                    # process_to_stop.send_signal(signal.CTRL_C_EVENT) # ржПржЯрж┐ ржХрж╛ржЬ ржирж╛ржУ ржХрж░рждрзЗ ржкрж╛рж░рзЗ рж╕ржмрж╕ржоржпрж╝
                    # process_to_stop.wait(timeout=5)
                    # print("   -> FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣рзЯрзЗржЫрзЗ (SIGINT/CTRL_C)ред")
                    # ржЙржкрж░рзЗрж░ржЯрж╛ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржирж╛ рж╣рж▓рзЗ taskkill ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:
                    subprocess.run(['taskkill', '/F', '/T', '/PID', str(process_to_stop.pid)], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    print("   -> FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣рзЯрзЗржЫрзЗ (taskkill)ред")
                else: # рж▓рж┐ржирж╛ржХрзНрж╕/ржорзНржпрж╛ржХрзЗрж░ ржЬржирзНржп
                    process_to_stop.terminate() # ржкрзНрж░ржержорзЗ SIGTERM ржкрж╛ржарж╛ржи
                    try:
                        process_to_stop.wait(timeout=5) # ржмржирзНржз рж╣ржУрзЯрж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи
                        print("   -> FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣рзЯрзЗржЫрзЗ (terminate)ред")
                    except subprocess.TimeoutExpired: # ржпржжрж┐ terminate ржХрж╛ржЬ ржирж╛ ржХрж░рзЗ
                        print("   -> FFmpeg ржкрзНрж░рж╕рзЗрж╕ terminate рж╣рзЯржирж┐, SIGKILL ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...")
                        process_to_stop.kill() # SIGKILL ржкрж╛ржарж╛ржи
                        process_to_stop.wait() # ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржмржирзНржз рж╣рзЯрзЗржЫрзЗ
                        print("   -> FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣рзЯрзЗржЫрзЗ (kill)ред")
            except Exception as e:
                print(f"тЪая╕П FFmpeg (PID: {process_to_stop.pid}) ржмржирзНржз ржХрж░рж╛рж░ рж╕ржорзЯ рждрзНрж░рзБржЯрж┐: {e}")
        elif process_to_stop:
             print("тД╣я╕П FFmpeg ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛рж░ рж╕ржорзЯ ржжрзЗржЦрж╛ ржЧрзЗрж▓рзЛ ржПржЯрж┐ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржмржирзНржз ржЫрж┐рж▓ред")

        # ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржЖржкржбрзЗржЯ
        if current_ffmpeg_process == process_to_stop:
             current_ffmpeg_process = None
             current_stream_is_multibitrate = False # рж░рж┐рж╕рзЗржЯ

def start_ffmpeg_stream(video_path, loop=False):
    """
    ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ FFmpeg HLS рж╕рзНржЯрзНрж░рж┐ржо рж╢рзБрж░рзБ ржХрж░рзЗред
    ржЗржиржкрзБржЯ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржирзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ:
    - ржпржжрж┐ <= COPY_THRESHOLD_HEIGHT рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржнрж┐ржбрж┐ржУ ржХржкрж┐ ржХрж░рзЗ, ржЕржбрж┐ржУ AAC рждрзЗ ржПржиржХрзЛржб ржХрж░рзЗред
    - ржпржжрж┐ > COPY_THRESHOLD_HEIGHT рж╣рзЯ, рждрж╛рж╣рж▓рзЗ TARGET_QUALITIES ржЕржирзБржпрж╛рзЯрзА ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ рж╕рзНржЯрзНрж░рж┐ржо рждрзИрж░рж┐ ржХрж░рзЗред
    """
    global current_ffmpeg_process, current_stream_is_multibitrate

    abs_video_path = os.path.abspath(video_path)
    if not os.path.exists(abs_video_path):
        print(f"тЭМ FFmpeg рж╢рзБрж░рзБ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛, ржлрж╛ржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐: {abs_video_path}")
        return None

    # ржЪрж▓ржорж╛ржи ржкрзНрж░рж╕рзЗрж╕ ржерж╛ржХрж▓рзЗ ржмржирзНржз ржХрж░рзБржи
    stop_ffmpeg_stream()
    # time.sleep(0.2) # ржмржирзНржз рж╣ржУрзЯрж╛рж░ ржЬржирзНржп ржПржХржЯрзБ рж╕ржорзЯ ржжрж┐ржи - stop_ffmpeg_stream is blocking

    # ржкрзБрж░рж╛рждржи рж╕рзЗржЧржорзЗржирзНржЯ ржлрж╛ржЗрж▓ ржПржмржВ рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
    print(f"ЁЯз╣ ржкрзБрж░ржирзЛ HLS ржлрж╛ржЗрж▓/ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржЪрзНржЫрзЗ ({STREAM_OUTPUT_DIR})...")
    try:
        if os.path.exists(STREAM_OUTPUT_DIR):
            for item in os.listdir(STREAM_OUTPUT_DIR):
                item_path = os.path.join(STREAM_OUTPUT_DIR, item)
                try:
                    if os.path.isdir(item_path):
                        shutil.rmtree(item_path) # рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрзБржи
                    elif os.path.isfile(item_path) and (item.endswith('.ts') or item.endswith('.m3u8')):
                        os.remove(item_path) # .ts ржмрж╛ .m3u8 ржлрж╛ржЗрж▓ ржорзБржЫрзБржи
                except OSError as e:
                    print(f"тЪая╕П ржкрзБрж░ржирзЛ ржлрж╛ржЗрж▓/ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        else:
             os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)
    except Exception as e:
        print(f"тЪая╕П рж╕рзНржЯрзНрж░рж┐ржо ржЖржЙржЯржкрзБржЯ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

    # ржнрж┐ржбрж┐ржУрж░ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи ржирж┐рж░рзНржгрзЯ
    input_height = get_video_resolution(abs_video_path)

    ffmpeg_command = []
    stream_mode = "" # рж▓ржЧрж┐ржВ ржПрж░ ржЬржирзНржп

    # --- ржбрж┐рж╕рж┐рж╢ржи: ржХржкрж┐ ржирж╛ржХрж┐ ржЯрзНрж░рж╛ржирзНрж╕ржХрзЛржб? ---
    if input_height is None or input_height <= COPY_THRESHOLD_HEIGHT:
        # ржорзЛржб: ржнрж┐ржбрж┐ржУ ржХржкрж┐, ржЕржбрж┐ржУ ржПржиржХрзЛржб (AAC)
        stream_mode = f"[ржнрж┐ржбрж┐ржУ ржХржкрж┐, ржЕржбрж┐ржУ {AUDIO_BITRATE_COPY_MODE}] (ржЗржиржкрзБржЯ <= {COPY_THRESHOLD_HEIGHT}p ржмрж╛ ржЕржЬрж╛ржирж╛)"
        current_stream_is_multibitrate = False

        ffmpeg_command_base = ['ffmpeg', '-re']
        if loop:
            ffmpeg_command_base.extend(['-stream_loop', '-1'])
        ffmpeg_command_base.extend(['-i', abs_video_path])

        ffmpeg_command_options = [
            '-c:v', 'copy',
            '-c:a', 'aac',
            '-b:a', AUDIO_BITRATE_COPY_MODE,
            '-ac', '2',
            '-ar', '44100',
            '-err_detect', 'ignore_err',
            '-ignore_unknown',
            '-f', 'hls',
            '-hls_time', '4',
            '-hls_list_size', '6',
            '-hls_flags', 'delete_segments+omit_endlist+program_date_time',
            '-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, 'segment%05d.ts'),
            MASTER_HLS_OUTPUT_FILE # ржХржкрж┐ ржорзЛржбрзЗ ржПржХржЯрж╛ржЗ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ, ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ ржирж╛ржорзЗржЗ рж░рж╛ржЦрж╛ ржпрж╛ржХ
        ]
        ffmpeg_command = ffmpeg_command_base + ffmpeg_command_options

    else:
        # ржорзЛржб: ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ ржЯрзНрж░рж╛ржирзНрж╕ржХрзЛржбрж┐ржВ
        stream_mode = f"[ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ ржЯрзНрж░рж╛ржирзНрж╕ржХрзЛржбрж┐ржВ] (ржЗржиржкрзБржЯ {input_height}p)"
        current_stream_is_multibitrate = True

        # ржЗржиржкрзБржЯ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржирзЗрж░ ржЪрзЗрзЯрзЗ ржмрзЬ ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржмрж╛ржж ржжрж┐ржи
        active_qualities = [q for q in TARGET_QUALITIES if q['height'] <= input_height]
        if not active_qualities:
             print(f"тЪая╕П ржЗржиржкрзБржЯ ржнрж┐ржбрж┐ржУрж░ ({input_height}p) ржЬржирзНржп ржХрзЛржирзЛ ржЙржкржпрзБржХрзНржд ржЯрж╛рж░рзНржЧрзЗржЯ ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред рж╕рж░рзНржмржирж┐ржорзНржи ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ({TARGET_QUALITIES[-1]['name']}) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")
             active_qualities = [TARGET_QUALITIES[-1]]
        else:
             print(f"ЁЯЪА рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржмрзЗ: {', '.join([q['name'] for q in active_qualities])}")


        # ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ FFmpeg ржХржорж╛ржирзНржб рждрзИрж░рж┐
        ffmpeg_command_base = ['ffmpeg', '-re']
        if loop:
             ffmpeg_command_base.extend(['-stream_loop', '-1'])
        ffmpeg_command_base.extend(['-i', abs_video_path])

        # ржЗржиржкрзБржЯ рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржк ржХрж░рж╛ (ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЙржЯржкрзБржЯрзЗрж░ ржЬржирзНржп)
        map_commands = []
        for i in range(len(active_qualities)):
             map_commands.extend(['-map', '0:v:0', '-map', '0:a:0']) # ржЗржиржкрзБржЯ ржнрж┐ржбрж┐ржУ ржПржмржВ ржЕржбрж┐ржУ ржорзНржпрж╛ржк ржХрж░рзБржи

        # ржлрж┐рж▓рзНржЯрж╛рж░, ржХрзЛржбрзЗржХ, ржмрж┐ржЯрж░рзЗржЯ рж╕рзЗржЯрж┐ржВрж╕ (ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЙржЯржкрзБржЯрзЗрж░ ржЬржирзНржп)
        filter_complex_parts = []
        codec_options = []
        var_stream_map_parts = [] # ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржЬржирзНржп

        for i, quality in enumerate(active_qualities):
             # ржнрж┐ржбрж┐ржУ ржлрж┐рж▓рзНржЯрж╛рж░ (рж╕рзНржХрзЗрж▓рж┐ржВ)
             filter_complex_parts.append(f"[0:v]scale=w=-2:h={quality['height']}[v{i}]")
             # ржнрж┐ржбрж┐ржУ ржХрзЛржбрзЗржХ рж╕рзЗржЯрж┐ржВрж╕
             codec_options.extend([
                 f'-map', f'[v{i}]', f'-c:v:{i}', 'libx264',
                 f'-b:v:{i}', quality['vb'],
                 f'-preset:{i}', quality.get('preset', 'veryfast'), # ржкрзНрж░рж┐рж╕рзЗржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
                 f'-profile:v:{i}', 'main', # рж╕рж╛ржоржЮрзНржЬрж╕рзНржпрзЗрж░ ржЬржирзНржп ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
                 f'-level:v:{i}', '4.0',     # рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
                 # '-g', str(int(4 * 25)), # GOP size = hls_time * framerate (ржЖржирзБржорж╛ржирж┐ржХ) - ржкрзНрж░рзЯрзЛржЬржи рж╣рж▓рзЗ
                 # '-keyint_min', str(int(4*25)), # Min keyframe interval - ржкрзНрж░рзЯрзЛржЬржи рж╣рж▓рзЗ
                 f'-sc_threshold:{i}', '0' # ржжрзГрж╢рзНржп ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржЬржирзНржп ржХрзАржлрзНрж░рзЗржо ржЬрзЛрж░ ржХрж░ржмрзЗржирж╛
             ])
             # ржЕржбрж┐ржУ ржХрзЛржбрзЗржХ рж╕рзЗржЯрж┐ржВрж╕ (ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЙржЯржкрзБржЯрзЗрж░ ржЬржирзНржп ржПржХржЗ ржЗржиржкрзБржЯ ржЕржбрж┐ржУ ржмрзНржпржмрж╣рж╛рж░)
             codec_options.extend([
                 f'-map', f'0:a:0', f'-c:a:{i}', 'aac',
                 f'-b:a:{i}', quality['ab'],
                 f'-ac:{i}', '2',
                 f'-ar:{i}', '44100'
             ])
             # ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржЬржирзНржп ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржкрж┐ржВ
             var_stream_map_parts.append(f"v:{i},a:{i},name:{quality['name']}")

        # рж╕ржм ржлрж┐рж▓рзНржЯрж╛рж░ ржПржХрж╕рж╛ржерзЗ ржпрзЛржЧ ржХрж░рзБржи
        filter_complex_command = ['-filter_complex', ";".join(filter_complex_parts)]

        # HLS рж╕рзЗржЯрж┐ржВрж╕
        hls_options = [
            '-f', 'hls',
            '-hls_time', '4',
            '-hls_list_size', '6',
            '-hls_flags', 'delete_segments+program_date_time', # omit_endlist ржмрж╛ржж ржжрж┐ржи, ржХрж╛рж░ржг ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗ ENDLIST ржерж╛ржХржмрзЗ
            '-master_pl_name', os.path.basename(MASTER_HLS_OUTPUT_FILE), # ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо
            # рж╕рзЗржЧржорзЗржирзНржЯ ржПржмржВ ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржЬржирзНржп рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржмрзНржпржмрж╣рж╛рж░
            '-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, '%v', 'segment%05d.ts'), # %v ржорж╛ржирзЗ ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ ржирж╛ржо (e.g., 720p)
            '-var_stream_map', " ".join(var_stream_map_parts),
        ]

        # ржЖржЙржЯржкрзБржЯ ржкрзНржпрж╛ржЯрж╛рж░рзНржи (ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ ржЬржирзНржп)
        output_pattern = os.path.join(STREAM_OUTPUT_DIR, '%v', 'playlist.m3u8')

        # рж╕ржорзНржкрзВрж░рзНржг ржХржорж╛ржирзНржб ржПржХрждрзНрж░ ржХрж░рзБржи
        ffmpeg_command = (
            ffmpeg_command_base +
            map_commands +
            filter_complex_command +
            codec_options +
            hls_options +
            [output_pattern]
        )

    # --- FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ ржХрж░рж╛ ---
    print(f"ЁЯЪА FFmpeg ржХржорж╛ржирзНржб ({stream_mode}):", " ".join(f'"{arg}"' if ' ' in arg else arg for arg in ffmpeg_command))

    try:
        # ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ ржорзЛржбрзЗ ржЖржЙржЯржкрзБржЯ рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ (ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ)
        if current_stream_is_multibitrate:
            for quality in active_qualities:
                subdir = os.path.join(STREAM_OUTPUT_DIR, quality['name'])
                os.makedirs(subdir, exist_ok=True)
                print(f"   -> ржЖржЙржЯржкрзБржЯ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐/ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {subdir}")

        # FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ
        process = subprocess.Popen(ffmpeg_command, stderr=subprocess.PIPE, stdout=subprocess.DEVNULL)

        # stderr рж▓ржЧрж┐ржВ ржерзНрж░рзЗржб (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
        def log_stderr(proc, path):
            if proc.stderr:
                try:
                    for line in iter(proc.stderr.readline, b''):
                        if stop_event.is_set(): break
                        line_str = line.decode('utf-8', errors='replace').strip()
                        if line_str:
                             # ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж▓ржЧ ржорзЗрж╕рзЗржЬ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рж╛ (ржпрзЗржоржи ржПрж░рж░, ржУрзЯрж╛рж░рзНржирж┐ржВ)
                             if any(kw in line_str.lower() for kw in ['error', 'failed', 'invalid', 'warning', 'possible', 'deprecated']):
                                 # ржХрж┐ржЫрзБ рж╕рж╛ржзрж╛рж░ржг ржУрзЯрж╛рж░рзНржирж┐ржВ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи Non-monotonous DTS)
                                 if "non-monotonous dts" not in line_str.lower() and "deprecated pixel format" not in line_str.lower():
                                     print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                             # else: # ржбрж┐ржмрж╛ржЧрж┐ржВ ржПрж░ ржЬржирзНржп рж╕ржм рж▓рж╛ржЗржи ржжрзЗржЦрждрзЗ ржЪрж╛ржЗрж▓рзЗ ржПржЯрж┐ ржЖржиржХржорзЗржирзНржЯ ржХрж░рзБржи
                             #    pass # print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                except Exception as e:
                     print(f"тЪая╕П FFmpeg stderr ржкрзЬрждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
                finally:
                     if proc.stderr: proc.stderr.close()
            # print(f"  [FFmpeg stderr рж░рж┐ржбрж┐ржВ ржерзНрж░рзЗржб рж╢рзЗрж╖ - {os.path.basename(path)}]")

        stderr_thread = threading.Thread(target=log_stderr, args=(process, video_path), daemon=True)
        stderr_thread.start()

        print(f"тЬЕ FFmpeg ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ (PID: {process.pid}) ржнрж┐ржбрж┐ржУ: {os.path.basename(video_path)} {stream_mode}, рж▓рзБржк: {loop}")
        with stream_lock: # рж▓ржХ рж╕рж╣ ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржЖржкржбрзЗржЯ
            current_ffmpeg_process = process
            # current_stream_is_multibitrate ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
        return process

    except FileNotFoundError:
        print(f"тЭМ рждрзНрж░рзБржЯрж┐: 'ffmpeg' ржХржорж╛ржирзНржб ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред FFmpeg ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ ржЖржЫрзЗ ржПржмржВ PATH ржП ржпрзЛржЧ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред")
        with stream_lock:
            current_ffmpeg_process = None
            current_stream_is_multibitrate = False
        return None
    except Exception as e:
        print(f"тЭМ FFmpeg рж╢рзБрж░рзБ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже ({os.path.basename(video_path)}): {e}")
        traceback.print_exc() # ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПрж░рж░ ржжрзЗржЦрж╛ржи
        with stream_lock:
            current_ffmpeg_process = None
            current_stream_is_multibitrate = False
        return None


# --- ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржирзЗржЬрж╛рж░ ---
def stream_manager():
    """
    ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржбрзЗ ржЪрж▓рзЗ, ржнрж┐ржбрж┐ржУ ржХрж┐ржЙ ржПржмржВ FFmpeg ржкрзНрж░рж╕рзЗрж╕ ржорзНржпрж╛ржирзЗржЬ ржХрж░рзЗред
    ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржЙржХрзЗ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ ржжрзЗрзЯред ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржерж╛ржХрж▓рзЗ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ рж▓рзБржк ржХрж░рзЗред
    ржХрж┐ржЙрждрзЗ ржирждрзБржи ржЖржЗржЯрзЗржо ржЖрж╕рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржмржирзНржз ржХрж░рзЗред
    ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржЪрж▓рж╛рж░ рж╕ржорзЯ ржкрж░рзЗрж░ ржнрж┐ржбрж┐ржУржЯрж┐ ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЗред
    """
    global currently_playing_url, default_video_path, current_ffmpeg_process

    print("тП│ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржЪрж▓ржЫрзЗ...")
    modified_default_url = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
    temp_default_path = download_video(modified_default_url, DEFAULT_VIDEO_FILENAME)
    if temp_default_path:
         default_video_path = temp_default_path
         print(f"тЬЕ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзНрждрзБржд: {default_video_path} (URL: {modified_default_url[:50]}...)")
    else:
         print(f"ЁЯЪи рж╕рждрж░рзНржХрждрж╛: ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ({modified_default_url[:50]}...) ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржпрж╛рзЯржирж┐! ржбрж┐ржлрж▓рзНржЯ ржкрзНрж▓рзЗржмрзНржпрж╛ржХ ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред")

    predownload_attempted_for_url = None # ржХрзЛржи URL ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржбрзЗрж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ

    while not stop_event.is_set():
        next_video_path = None
        play_url = None # ржПржЯрж┐ рж╣ржмрзЗ ржоржбрж┐ржлрж╛ржЗржб URL ржпрж╛ ржкрзНрж▓рзЗ ржХрж░рж╛ рж╣ржмрзЗ
        loop_default = False
        stop_default_and_process_queue = False # ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЪрж▓рж╛рж░ рж╕ржорзЯ ржХрж┐ржЙрждрзЗ ржЖржЗржЯрзЗржо ржПрж▓рзЗ ржПржЯрж┐ True рж╣ржмрзЗ

        try:
            with stream_lock: # ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛рж░ ржЖржЧрзЗ рж▓ржХ ржирж┐ржи
                ffmpeg_is_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
                current_url_snapshot = currently_playing_url # ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ ржХржкрж┐ ржХрж░рзБржи (ржПржЯрж┐ржУ ржоржбрж┐ржлрж╛ржЗржб URL рж╣ржмрзЗ)

                # --- ржбрж┐рж╕рж┐рж╢ржи рж▓ржЬрж┐ржХ (ржЖржЧрзЗрж░ ржорждржЗ, рж╢рзБржзрзБ ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯрзЗ ржоржирзЛржпрзЛржЧ ржжрж┐ржи) ---

                # 1. FFmpeg ржЪрж▓ржЫрзЗ?
                if ffmpeg_is_running:
                    modified_default_url_snapshot = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
                    # 1a. ржХрж┐ржЙ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрзЗ ржПржмржВ ржХрж┐ржЙрждрзЗ ржЖрж░ржУ ржЖржЗржЯрзЗржо ржЖржЫрзЗ? ржкрж░рзЗрж░ржЯрж╛ ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
                    if current_url_snapshot != modified_default_url_snapshot and video_queue:
                        next_url_in_queue_raw = video_queue[0]
                        next_url_in_queue_modified = ensure_dropbox_raw_param(next_url_in_queue_raw)

                        if next_url_in_queue_modified != predownload_attempted_for_url:
                            print(f"ЁЯФО ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржбрзЗрж░ ржЬржирзНржп ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {next_url_in_queue_modified[:80]}...")
                            next_filename = get_safe_filename(next_url_in_queue_modified)
                            downloaded_path = download_video(next_url_in_queue_modified, next_filename)
                            if downloaded_path:
                                print(f"ЁЯСН ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи ржмрж╛ ржлрж╛ржЗрж▓ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЖржЫрзЗ: {next_filename}")
                            else:
                                print(f"ЁЯСО ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб ржмрзНржпрж░рзНрже: {next_url_in_queue_modified[:80]}...")
                            predownload_attempted_for_url = next_url_in_queue_modified # ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржмрж▓рзЗ ржорж╛рж░рзНржХ ржХрж░рзБржи

                    # 1b. ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрзЗ ржХрж┐ржирзНрждрзБ ржХрж┐ржЙрждрзЗ ржирждрзБржи ржЖржЗржЯрзЗржо ржПрж╕рзЗржЫрзЗ? ржбрж┐ржлрж▓рзНржЯ ржмржирзНржз ржХрж░рждрзЗ рж╣ржмрзЗ
                    elif current_url_snapshot == modified_default_url_snapshot and video_queue:
                        print("ЁЯФД ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрж┐рж▓, ржХрж┐ржирзНрждрзБ ржХрж┐ржЙрждрзЗ ржирждрзБржи ржЖржЗржЯрзЗржо ржПрж╕рзЗржЫрзЗред ржбрж┐ржлрж▓рзНржЯ ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
                        stop_default_and_process_queue = True
                        predownload_attempted_for_url = None # ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб рж░рж┐рж╕рзЗржЯ

                    # 1c. ржЕржирзНржпрж╛ржирзНржп ржХрзНрж╖рзЗрждрзНрж░рзЗ: ржХрж┐ржЫрзБ ржХрж░рж╛рж░ ржирзЗржЗ
                    else:
                        if current_url_snapshot != modified_default_url_snapshot and not video_queue:
                            predownload_attempted_for_url = None
                        pass

                # 2. FFmpeg ржЪрж▓ржЫрзЗ ржирж╛?
                else:
                    predownload_attempted_for_url = None # ржкрзНрж░рж┐-ржбрж╛ржЙржирж▓рзЛржб рж░рж┐рж╕рзЗржЯ
                    if current_ffmpeg_process and current_ffmpeg_process.poll() is not None:
                        print(f"ЁЯПБ FFmpeg (PID: {current_ffmpeg_process.pid}) рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗред")
                        modified_default_url_snapshot = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
                        if current_url_snapshot and current_url_snapshot != modified_default_url_snapshot:
                             played_today.add(current_url_snapshot)
                        current_ffmpeg_process = None # ржкрзНрж░рж╕рзЗрж╕ рж░рж┐рж╕рзЗржЯ
                        currently_playing_url = None # URL рж░рж┐рж╕рзЗржЯ
                        current_stream_is_multibitrate = False # ржорзЛржб рж░рж┐рж╕рзЗржЯ

                    # 2a. ржХрж┐ржЙрждрзЗ ржнрж┐ржбрж┐ржУ ржЖржЫрзЗ?
                    if video_queue:
                        raw_url_from_queue = video_queue.popleft()
                        play_url = ensure_dropbox_raw_param(raw_url_from_queue)
                        print(f"тЦ╢я╕П ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржЙ ржерзЗржХрзЗ ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ (ржоржбрж┐ржлрж╛ржЗржб): {play_url[:80]}...")
                        filename = get_safe_filename(play_url)
                        next_video_path = download_video(play_url, filename)
                        if not next_video_path:
                            print(f"тЭМ ржбрж╛ржЙржирж▓рзЛржб ржмрзНржпрж░рзНрже (ржкрзНрж▓рзЗ ржХрж░рж╛рж░ ржЬржирзНржп): {play_url[:80]}... ржПржЯрж┐ рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред")
                            play_url = None
                            currently_playing_url = None
                        else:
                             loop_default = False # ржХрж┐ржЙ ржнрж┐ржбрж┐ржУ рж▓рзБржк рж╣рзЯ ржирж╛
                             currently_playing_url = play_url

                    # 2b. ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржХрж┐ржирзНрждрзБ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЖржЫрзЗ?
                    elif default_video_path:
                        modified_default_url_snapshot = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
                        if current_url_snapshot != modified_default_url_snapshot:
                             print("тД╣я╕П ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржЙ ржЦрж╛рж▓рж┐ред ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржкрзНрж▓рзЗ ржХрж░рж╛ рж╣ржмрзЗ (рж▓рзБржк рж╕рж╣)ред")
                        next_video_path = default_video_path
                        play_url = modified_default_url_snapshot
                        loop_default = True
                        currently_playing_url = play_url

                    # 2c. ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржПржмржВ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржирзЗржЗ?
                    else:
                        if current_url_snapshot:
                             print("тП│ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржПржмржВ ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЙржкрж▓ржмрзНржз ржирзЗржЗред ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
                        currently_playing_url = None
                        pass

            # --- ржЕрзНржпрж╛ржХрж╢ржи ---
            if stop_default_and_process_queue:
                print("ЁЯЫС ржбрж┐ржлрж▓рзНржЯ рж╕рзНржЯрзНрж░рж┐ржо ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
                stop_ffmpeg_stream()
                time.sleep(0.5)
                continue # ржкрж░рзЗрж░ ржЖржЗржЯрзЗржо ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ рж▓рзБржкрзЗрж░ рж╢рзБрж░рзБрждрзЗ ржпрж╛ржи

            if next_video_path and play_url:
                print(f"ЁЯОм FFmpeg рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐... ржнрж┐ржбрж┐ржУ: {os.path.basename(next_video_path)}, рж▓рзБржк: {loop_default}")
                started_process = start_ffmpeg_stream(next_video_path, loop=loop_default)
                if not started_process:
                     with stream_lock:
                         if currently_playing_url == play_url:
                             currently_playing_url = None
                             current_stream_is_multibitrate = False # ржорзЛржб рж░рж┐рж╕рзЗржЯ
                             print(f"тЪая╕П ржмрзНржпрж░рзНрже URL '{play_url[:80]}...' ржкрзНрж▓рзЗ ржХрж░рж╛ ржЧрзЗрж▓рзЛ ржирж╛ред")

            # --- ржЕржкрзЗржХрзНрж╖рж╛ ---
            time.sleep(1) # ржЫрзЛржЯ роЗроЯрпИрзЗржд ржЪрзЗржХ ржХрж░рж╛ ржнрж╛рж▓, ржХрж╛рж░ржг FFmpeg ржирж┐ржЬрзЗржЗ ржЖржЙржЯржкрзБржЯ рждрзИрж░рж┐ ржХрж░ржЫрзЗ

        except Exception as e:
             print(f"ЁЯЪиЁЯЪи рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржирзЗржЬрж╛рж░ рж▓рзБржкрзЗ ржорж╛рж░рж╛рждрзНржоржХ рждрзНрж░рзБржЯрж┐: {e} ЁЯЪиЁЯЪи")
             traceback.print_exc()
             try:
                 stop_ffmpeg_stream()
             except Exception as stop_err:
                  print(f"ЁЯЪи рждрзНрж░рзБржЯрж┐рж░ ржкрж░ FFmpeg ржмржирзНржз ржХрж░рждрзЗржУ рж╕ржорж╕рзНржпрж╛: {stop_err}")
             with stream_lock:
                 currently_playing_url = None
                 predownload_attempted_for_url = None
                 current_stream_is_multibitrate = False # рж░рж┐рж╕рзЗржЯ
             print("ЁЯФБ рзл рж╕рзЗржХрзЗржирзНржб ржкрж░ рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржирзЗржЬрж╛рж░ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛...")
             time.sleep(5)

    print("ЁЯЫС рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржирзЗржЬрж╛рж░ ржерзНрж░рзЗржб ржмржирзНржз рж╣ржЪрзНржЫрзЗред")
    stop_ffmpeg_stream()


# --- Flask Routes ---

# HTML ржкрзНрж▓рзЗрзЯрж╛рж░ ржкрзЗржЬ
@app.route('/')
def index():
    # ржкрзНрж▓рзЗрзЯрж╛рж░ржХрзЗ ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯрзЗрж░ URL ржжрж┐ржи
    hls_url = url_for('stream', filename=os.path.basename(MASTER_HLS_OUTPUT_FILE), _external=True)
    return render_template('index.html', hls_url=hls_url)

# HTML ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓
@app.route('/admin')
def admin_panel():
    with stream_lock:
        queue_snapshot = list(video_queue)
        played_snapshot = list(played_today)
        current_url_snapshot = currently_playing_url
        is_ffmpeg_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
        is_multibitrate = current_stream_is_multibitrate
        status_detail = ""
        if is_ffmpeg_running and video_queue:
            next_in_queue_raw = video_queue[0]
            status_detail = f" | ржПрж░ржкрж░ ржХрж┐ржЙрждрзЗ: {next_in_queue_raw[:50]}..."

    modified_default_url = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)
    if is_ffmpeg_running:
        mode = "[ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ]" if is_multibitrate else "[ржнрж┐ржбрж┐ржУ ржХржкрж┐]"
        if current_url_snapshot == modified_default_url:
            # ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ ржорзЛржбрзЗ ржЪрж▓рждрзЗ ржкрж╛рж░рзЗ ржпржжрж┐ ржПржЯрж┐ 480p ржПрж░ ржмрзЗрж╢рж┐ рж╣рзЯ
            current_status = f"ржбрж┐ржлрж▓рзНржЯ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрзЗ {mode} (рж▓рзБржк){status_detail}"
        elif current_url_snapshot:
            current_status = f"ржЪрж▓ржЫрзЗ: {current_url_snapshot[:80]}... {mode}{status_detail}"
        else:
            current_status = f"ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрзЗ (URL ржЕржЬрж╛ржирж╛) {mode}"
    else:
        current_status = "тнХ ржХрзЛржирзЛ ржнрж┐ржбрж┐ржУ ржЪрж▓ржЫрзЗ ржирж╛"
        if video_queue:
             current_status += f" | ржкрзНрж▓рзЗ ржХрж░рж╛рж░ ржЕржкрзЗржХрзНрж╖рж╛рзЯ: {video_queue[0][:50]}..."

    return render_template('admin.html',
                           queue=queue_snapshot,
                           current_status=current_status,
                           played=played_snapshot)

# HTML ржлрж░рзНржо ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ржпрзЛржЧ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
@app.route('/admin/add', methods=['POST'])
def add_video_form():
    url_from_form = request.form.get('video_url', '').strip()
    if url_from_form:
        if url_from_form.startswith('http://') or url_from_form.startswith('https://'):
            url_to_add = ensure_dropbox_raw_param(url_from_form)
            with stream_lock:
                if url_to_add in video_queue:
                     flash(f'"{url_to_add[:50]}..." ржПржЗ URL ржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржХрж┐ржЙрждрзЗ ржЖржЫрзЗ (рж╕ржорзНржнржмржд raw=1 рж╕рж╣)ред', 'warning')
                else:
                    video_queue.append(url_to_add)
                    print(f"ЁЯУе [ржЕрзНржпрж╛ржбржорж┐ржи] ржХрж┐ржЙрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {url_to_add}")
                    flash(f'"{url_to_add[:50]}..." рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж┐ржЙрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред', 'success')
            return redirect(url_for('admin_panel'))
        else:
            flash('ржЕржмрзИржз URL! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ http:// ржмрж╛ https:// ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣ржУрзЯрж╛ ржПржХржЯрж┐ URL ржжрж┐ржиред', 'error')
    else:
        flash('URL ржЦрж╛рж▓рж┐ рж░рж╛ржЦрж╛ ржпрж╛ржмрзЗ ржирж╛ред', 'error')
    return redirect(url_for('admin_panel'))

# HTML ржмрж╛ржЯржи ржерзЗржХрзЗ ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржХрж░рж╛ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
@app.route('/admin/clear_queue', methods=['POST'])
def clear_queue_form():
    with stream_lock:
        if video_queue:
            video_queue.clear()
            print("ЁЯЧСя╕П [ржЕрзНржпрж╛ржбржорж┐ржи] ржнрж┐ржбрж┐ржУ ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
            flash('ржнрж┐ржбрж┐ржУ ржХрж┐ржЙ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЦрж╛рж▓рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред', 'success')
        else:
             flash('ржнрж┐ржбрж┐ржУ ржХрж┐ржЙ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЦрж╛рж▓рж┐ ржЫрж┐рж▓ред', 'info')
    return redirect(url_for('admin_panel'))

# HTML ржмрж╛ржЯржи ржерзЗржХрзЗ 'ржЖржЬржХрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ' рждрж╛рж▓рж┐ржХрж╛ ржЦрж╛рж▓рж┐ ржХрж░рж╛ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
@app.route('/admin/clear_played', methods=['POST'])
def clear_played_form():
    with stream_lock:
        if played_today:
            played_today.clear()
            print("ЁЯЧСя╕П [ржЕрзНржпрж╛ржбржорж┐ржи] 'ржЖржЬржХрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ' рждрж╛рж▓рж┐ржХрж╛ ржЦрж╛рж▓рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
            flash("'ржЖржЬржХрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ' рждрж╛рж▓рж┐ржХрж╛ ржЦрж╛рж▓рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", 'success')
        else:
             flash("'ржЖржЬржХрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ' рждрж╛рж▓рж┐ржХрж╛ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЦрж╛рж▓рж┐ ржЫрж┐рж▓ред", 'info')
    return redirect(url_for('admin_panel'))

# --- API Routes --- (ржЖржЧрзЗрж░ ржорждрзЛржЗ)

# API: ржнрж┐ржбрж┐ржУ ржпрзЛржЧ ржХрж░рж╛ (GET)
@app.route('/add', methods=['GET'])
def add_video_api():
    url_from_request = request.args.get('link', '').strip()
    if not url_from_request:
        print("тЭМ [API Add] ржмрзНржпрж░рзНрже: 'link' ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400
    if not (url_from_request.startswith('http://') or url_from_request.startswith('https://')):
        print(f"тЭМ [API Add] ржмрзНржпрж░рзНрже: ржЕржмрзИржз URL ржлрж░ржорзНржпрж╛ржЯ ({url_from_request[:50]}...)")
        return jsonify({'status': 'error', 'message': 'Invalid URL format.', 'url': url_from_request}), 400

    url_to_add = ensure_dropbox_raw_param(url_from_request)
    with stream_lock:
        if url_to_add in video_queue:
            print(f"тЪая╕П [API Add] ржЗрждрж┐ржоржзрзНржпрзЗ ржХрж┐ржЙрждрзЗ ржЖржЫрзЗ: {url_to_add[:80]}...")
            return jsonify({'status': 'warning', 'message': 'Video already in queue.', 'url': url_to_add, 'original_url': url_from_request}), 200
        else:
            video_queue.append(url_to_add)
            print(f"тЬЕ [API Add] ржХрж┐ржЙрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {url_to_add[:80]}...")
            return jsonify({'status': 'success', 'message': 'Video added to queue.', 'url': url_to_add, 'original_url': url_from_request}), 200

# API: ржнрж┐ржбрж┐ржУ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ (GET)
@app.route('/delete', methods=['GET'])
def delete_video_api():
    link_param = request.args.get('link', '').strip()
    if not link_param:
        print("тЭМ [API Delete] ржмрзНржпрж░рзНрже: 'link' ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400

    with stream_lock:
        if link_param.lower() == 'all':
            if video_queue:
                queue_len = len(video_queue)
                video_queue.clear()
                print(f"тЬЕ [API Delete] рж╕ржорзНржкрзВрж░рзНржг ржХрж┐ржЙ ржЦрж╛рж▓рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ({queue_len} ржЯрж┐ ржЖржЗржЯрзЗржо ржЫрж┐рж▓)ред")
                return jsonify({'status': 'success', 'message': f'Queue cleared. {queue_len} items removed.'}), 200
            else:
                print("тД╣я╕П [API Delete] ржХрж┐ржЙ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЦрж╛рж▓рж┐ ржЫрж┐рж▓ (link=all)ред")
                return jsonify({'status': 'info', 'message': 'Queue was already empty.'}), 200
        else:
            url_from_request = link_param
            if not (url_from_request.startswith('http://') or url_from_request.startswith('https://')):
                 print(f"тЭМ [API Delete] ржмрзНржпрж░рзНрже: ржбрж┐рж▓рж┐ржЯрзЗрж░ ржЬржирзНржп ржЕржмрзИржз URL ржлрж░ржорзНржпрж╛ржЯ ({url_from_request[:50]}...)")
                 return jsonify({'status': 'error', 'message': 'Invalid URL format for deletion.', 'url': url_from_request}), 400

            url_to_delete = ensure_dropbox_raw_param(url_from_request)
            current_playing_modified = ensure_dropbox_raw_param(currently_playing_url) if currently_playing_url else None
            default_url_modified = ensure_dropbox_raw_param(DEFAULT_VIDEO_URL)

            if url_to_delete == current_playing_modified and url_to_delete != default_url_modified:
                 print(f"тЭМ [API Delete] ржмрзНржпрж░рзНрже: ржмрж░рзНрждржорж╛ржирзЗ ржЪрж▓ржЫрзЗ ржПржоржи ржнрж┐ржбрж┐ржУ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ ({url_to_delete[:80]}...)")
                 return jsonify({'status': 'error', 'message': 'Cannot delete the currently playing video.', 'url': url_to_delete, 'original_url': url_from_request}), 403

            try:
                video_queue.remove(url_to_delete)
                print(f"тЬЕ [API Delete] ржХрж┐ржЙ ржерзЗржХрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {url_to_delete[:80]}...")
                return jsonify({'status': 'success', 'message': 'Video removed from queue.', 'url': url_to_delete, 'original_url': url_from_request}), 200
            except ValueError:
                print(f"тЭМ [API Delete] ржмрзНржпрж░рзНрже: ржнрж┐ржбрж┐ржУ ржХрж┐ржЙрждрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ ({url_to_delete[:80]}...)")
                return jsonify({'status': 'error', 'message': 'Video not found in queue.', 'url': url_to_delete, 'original_url': url_from_request}), 404

# --- HLS рж╕рзНржЯрзНрж░рж┐ржо ржкрж░рж┐ржмрзЗрж╢ржи (ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ, ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ ржПржмржВ рж╕рзЗржЧржорзЗржирзНржЯ) ---
@app.route('/stream/<path:filename>')
def stream(filename):
    """
    HLS ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржкрж░рж┐ржмрзЗрж╢ржи ржХрж░рзЗред ржПржЯрж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ (master.m3u8),
    ржнрзЗрж░рж┐рзЯрзЗржирзНржЯ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ (ржпрзЗржоржи, 720p/playlist.m3u8) ржПржмржВ
    рж╕рзЗржЧржорзЗржирзНржЯ ржлрж╛ржЗрж▓ (ржпрзЗржоржи, 720p/segment00001.ts) рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
    """
    stream_abs_path = os.path.abspath(STREAM_OUTPUT_DIR)
    safe_base = os.path.normpath(stream_abs_path)
    # filename ржП рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи '720p/playlist.m3u8')
    file_abs_path = os.path.normpath(os.path.join(safe_base, filename))

    # ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржЯрзНрж░рзНржпрж╛ржнрж╛рж░рзНрж╕рж╛рж▓ ржЕрзНржпрж╛ржЯрж╛ржХ рж░рзЛржз
    if not file_abs_path.startswith(safe_base):
        print(f"ЁЯЪл ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж▓ржЩрзНржШржи ржкрзНрж░ржЪрзЗрж╖рзНржЯрж╛ рж░рзЛржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {filename}")
        abort(403) # Forbidden

    # ржлрж╛ржЗрж▓ржЯрж┐ ржЖрж╕рж▓рзЗржЗ ржПржХржЯрж┐ ржлрж╛ржЗрж▓ ржХрж┐ржирж╛ ржПржмржВ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
    if not os.path.isfile(file_abs_path):
        # print(f"ЁЯФН HLS ржлрж╛ржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐: {file_abs_path}") # ржбрж┐ржмрж╛ржЧрж┐ржВ - ржЦрзБржм ржмрзЗрж╢рж┐ рж▓ржЧ рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗ
        abort(404) # Not Found

    try:
        # send_from_directory рж╕рж╛ржм-ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЗ
        # directory ржЖрж░рзНржЧрзБржорзЗржирзНржЯ рж╣рж▓ ржмрзЗрж╕ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐
        # filename ржЖрж░рзНржЧрзБржорзЗржирзНржЯ рж╣рж▓ directory ржПрж░ ржнрзЗрждрж░рзЗрж░ рж░рж┐рж▓рзЗржЯрж┐ржн ржкрж╛рже
        directory_part, file_part = os.path.split(filename)
        actual_directory = os.path.join(safe_base, directory_part)

        # print(f"ЁЯУд ржлрж╛ржЗрж▓ ржкрж░рж┐ржмрзЗрж╢ржи: directory='{actual_directory}', filename='{file_part}'") # ржбрж┐ржмрж╛ржЧрж┐ржВ

        response = send_from_directory(actual_directory, file_part, conditional=True)

        # ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рж╕рж╛ржЗржб ржХрзНржпрж╛рж╢рж┐ржВ ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп рж╣рзЗржбрж╛рж░ рж╕рзЗржЯ ржХрж░рж╛
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        return response

    except FileNotFoundError:
         abort(404)
    except Exception as e:
        print(f"тЭМ рж╕рзНржЯрзНрж░рж┐ржо ржлрж╛ржЗрж▓ рж╕рж╛рж░рзНржн ржХрж░рж╛рж░ рж╕ржорзЯ рждрзНрж░рзБржЯрж┐ ({filename}): {e}")
        traceback.print_exc() # ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПрж░рж░ рж▓ржЧ
        abort(500) # Internal Server Error

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмржирзНржз ржХрж░рж╛рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЖржЧрзЗрж░ ржорждрзЛржЗ) ---
def signal_handler(sig, frame):
    if stop_event.is_set():
        print("тП│ ржЗрждрж┐ржоржзрзНржпрзЗ ржмржирзНржз ржХрж░рж╛рж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржЪрж▓ржЫрзЗ...")
        return
    print("\nЁЯЪж ржмржирзНржз ржХрж░рж╛рж░ рж╕рж┐ржЧржирзНржпрж╛рж▓ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ (Ctrl+C)...")
    stop_event.set()
    print("тП│ FFmpeg ржПржмржВ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржерзНрж░рзЗржб ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    # time.sleep(0.5)

    print("ЁЯЪж рж╕рж┐ржЧржирзНржпрж╛рж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржерзЗржХрзЗ FFmpeg ржмржирзНржз ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛...")
    stop_ffmpeg_stream()

    print("ЁЯСЛ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмржирзНржз рж╣ржЪрзНржЫрзЗред")
    exit(0)

# --- ржкрзНрж░ржзрж╛ржи ржЪрж╛рж▓ржХ ---
if __name__ == '__main__':
    print("*"*60)
    print("ЁЯЪА ржорж╛рж▓рзНржЯрж┐-ржмрж┐ржЯрж░рзЗржЯ рж▓рж╛ржЗржн рж╕рзНржЯрзНрж░рж┐ржо ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")
    print(f"   тЬи ржорзЛржб: ржЗржиржкрзБржЯ > {COPY_THRESHOLD_HEIGHT}p рж╣рж▓рзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзЛржб ({', '.join([q['name'] for q in TARGET_QUALITIES])}), ржЕржирзНржпржерж╛рзЯ ржнрж┐ржбрж┐ржУ ржХржкрж┐ред")
    print("   ЁЯФз ржмрзИрж╢рж┐рж╖рзНржЯрзНржп: Dropbox URL-ржП рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ 'raw=1' ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗред")
    print(f"тП░ ржмрж░рзНрждржорж╛ржи рж╕ржорзЯ: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"ЁЯУВ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: {os.path.abspath(VIDEO_DIR)}")
    print(f"ЁЯУ║ рж╕рзНржЯрзНрж░рж┐ржо ржЖржЙржЯржкрзБржЯ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: {os.path.abspath(STREAM_OUTPUT_DIR)}")
    print("*"*60)

    # рж╕рж┐ржЧржирзНржпрж╛рж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж╕рзНржЯрзНрж░рж┐ржо ржорзНржпрж╛ржирзЗржЬрж╛рж░ ржерзНрж░рзЗржб рж╢рзБрж░рзБ ржХрж░рзБржи
    manager_thread = threading.Thread(target=stream_manager, name="StreamManager", daemon=True)
    manager_thread.start()

    host = '0.0.0.0'
    port = 5000
    print(f"ЁЯМН Flask ржЕрзНржпрж╛ржк http://{host}:{port} ржП рж╢рзЛржирж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд...")
    print(f"ЁЯФС HTML ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓: http://127.0.0.1:{port}/admin")
    # ржкрзНрж▓рзЗрзЯрж╛рж░рзЗрж░ URL ржПржЦржи ржорж╛рж╕рзНржЯрж╛рж░ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ
    print(f"ЁЯСА ржкрзНрж▓рзЗрзЯрж╛рж░ ржжрзЗржЦрзБржи: http://127.0.0.1:{port}/")
    print(f"   (ржкрзНрж▓рзЗрзЯрж╛рж░ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ '/stream/master.m3u8' рж▓рзЛржб ржХрж░ржмрзЗ)")
    print(f"тЪЩя╕П API Endpoints:")
    print(f"   - ржнрж┐ржбрж┐ржУ ржпрзЛржЧ ржХрж░рзБржи (GET): http://127.0.0.1:{port}/add?link=VIDEO_URL")
    print(f"   - ржнрж┐ржбрж┐ржУ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи (GET): http://127.0.0.1:{port}/delete?link=VIDEO_URL")
    print(f"   - рж╕ржм ржХрж┐ржЙ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи (GET): http://127.0.0.1:{port}/delete?link=all")
    print("\nЁЯЫС ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмржирзНржз ржХрж░рждрзЗ Ctrl+C ржЪрж╛ржкрзБржиред")

    try:
        app.run(host=host, port=port, threaded=True, use_reloader=False, debug=False)
    except Exception as e:
        print(f"Flask ржЕрзНржпрж╛ржк ржЪрж╛рж▓рж╛рждрзЗ ржЧрж┐рзЯрзЗ ржорж╛рж░рж╛рждрзНржоржХ рждрзНрж░рзБржЯрж┐: {e}")
        traceback.print_exc()
    finally:
        print("\nFlask ржЕрзНржпрж╛ржк ржмржирзНржз рж╣рзЯрзЗржЫрзЗ ржмрж╛ рж╣рждрзЗ ржЪрж▓рзЗржЫрзЗ...")
        if not stop_event.is_set():
            print("   -> stop_event рж╕рзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
            stop_event.set()

        if manager_thread.is_alive():
            print("   -> ржорзНржпрж╛ржирзЗржЬрж╛рж░ ржерзНрж░рзЗржбржХрзЗ ржмржирзНржз рж╣ржУрзЯрж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░рзНржпржирзНржд)...")
            manager_thread.join(timeout=10)
            if manager_thread.is_alive():
                 print("тЪая╕П ржорзНржпрж╛ржирзЗржЬрж╛рж░ ржерзНрж░рзЗржб ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорзЯрзЗрж░ ржоржзрзНржпрзЗ ржмржирзНржз рж╣рзЯржирж┐ред")

        print("   -> ржЪрзВрзЬрж╛ржирзНрждржнрж╛ржмрзЗ FFmpeg ржмржирзНржз ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛...")
        stop_ffmpeg_stream()

        print("ЁЯСЛ ржкрзНрж░ржзрж╛ржи ржерзНрж░рзЗржб рж╕ржорж╛ржкрзНрждред")
