import os
import subprocess
import threading
import time
import signal
import requests
import hashlib
from flask import Flask, render_template, send_from_directory, abort, request, redirect, url_for, flash, jsonify
from flask_cors import CORS
from collections import deque # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import traceback # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
DEFAULT_VIDEO_URL = "https://www.dropbox.com/scl/fi/2w5ai1fda804zfruoj8yn/assets_staytuned0.ts?rlkey=jixrs4b1v3keu4q6hpebmbw5v&st=b1teebao&raw=1"
DEFAULT_VIDEO_FILENAME = "default_video.ts"

VIDEO_DIR = "videos"
STREAM_OUTPUT_DIR = "stream_output"
HLS_OUTPUT_FILE = os.path.join(STREAM_OUTPUT_DIR, "stream.m3u8")

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
video_queue = deque()
played_today = set()
current_ffmpeg_process = None
stop_event = threading.Event()
stream_lock = threading.Lock() # ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç ffmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ï
currently_playing_url = None
default_video_path = None

app = Flask(__name__)
CORS(app) # ‡¶∏‡¶¨ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®
app.secret_key = os.urandom(24)

# --- ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ---
os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)

# --- Helper Functions ---

def get_safe_filename(url):
    """URL ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá (‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)"""
    hashed_url = hashlib.sha1(url.encode()).hexdigest()[:10] # URL ‡¶è‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂
    try:
        base_name = os.path.basename(url.split('?')[0])
        _, ext = os.path.splitext(base_name)
        if not ext or len(ext) > 5:
             ext = '.mp4' # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶®
    except Exception:
        ext = '.mp4' # ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü

    # ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
    if ext.lower() not in ['.mp4', '.ts', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.m3u8']:
         ext = '.mp4' # ‡¶Ö‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶π‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü

    return f"video_{hashed_url}{ext}"

def download_video(url, output_filename):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá"""
    filepath = os.path.join(VIDEO_DIR, output_filename)
    try:
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®
        if os.path.exists(filepath):
            try:
                if os.path.getsize(filepath) > 0:
                    print(f"‚ÑπÔ∏è '{output_filename}' ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶®‡ßü‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§")
                    return filepath
                else:
                    print(f"‚ö†Ô∏è '{output_filename}' ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶õ‡¶ø‡¶≤ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ñ‡¶æ‡¶≤‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
            except OSError as e:
                 print(f"‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ '{filepath}': {e}‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")

        print(f"‚è¨ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {url} -> {filepath}")
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, stream=True, timeout=60, headers=headers, allow_redirects=True) # ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡ßÅ‡¶®
        response.raise_for_status() # HTTP ‡¶è‡¶∞‡¶∞ ‡¶ö‡ßá‡¶ï

        # Content-Type ‡¶ö‡ßá‡¶ï (‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶®‡¶®-‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ)
        content_type = response.headers.get('content-type', '').lower()
        problematic_types = ['text/html', 'application/json'] # ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶ï‡¶Æ
        is_likely_video = 'video' in content_type or 'mpegurl' in content_type or 'octet-stream' in content_type or not any(ptype in content_type for ptype in problematic_types)

        if not is_likely_video:
             print(f"‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: Content-Type '{content_type}' ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ ({url})‡•§ ‡¶§‡¶¨‡ßÅ‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßá‡¶ñ‡¶æ
        with open(filepath, "wb") as f:
            downloaded_size = 0
            for chunk in response.iter_content(chunk_size=8192 * 4): # ‡¶ö‡¶æ‡¶ô‡ßç‡¶ï ‡¶∏‡¶æ‡¶á‡¶ú ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá
                if stop_event.is_set(): # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                    print("üõë ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß)‡•§")
                    if os.path.exists(filepath): os.remove(filepath)
                    return None
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)

        # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï
        if downloaded_size == 0:
             print(f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡ß¶ ({filepath})‡•§ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá‡•§")
             if os.path.exists(filepath): os.remove(filepath) # ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
             return None

        print(f"‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá: {output_filename} (Size: {downloaded_size / (1024 * 1024):.2f} MB)")
        return filepath

    except requests.exceptions.Timeout:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ({url})")
        if os.path.exists(filepath): os.remove(filepath) # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
        return None
    except requests.exceptions.SSLError as e:
        print(f"‚ùå SSL ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({url}): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ({url}): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None
    except Exception as e:
        print(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({url}): {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None

def stop_ffmpeg_stream():
    """‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá"""
    global current_ffmpeg_process
    with stream_lock: # ‡¶≤‡¶ï ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
        process_to_stop = current_ffmpeg_process
        if process_to_stop and process_to_stop.poll() is None: # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶ø ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø‡¶á ‡¶ö‡¶≤‡¶õ‡ßá?
            print(f"‚è≥ FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (PID: {process_to_stop.pid})...")
            try:
                if os.name == 'nt': # ‡¶â‡¶á‡¶®‡ßç‡¶°‡ßã‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                    subprocess.run(['taskkill', '/F', '/PID', str(process_to_stop.pid)], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    print("   -> FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá (taskkill)‡•§")
                else: # ‡¶≤‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶∏/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                    process_to_stop.terminate() # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá SIGTERM ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                    try:
                        process_to_stop.wait(timeout=5) # ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
                        print("   -> FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá (terminate)‡•§")
                    except subprocess.TimeoutExpired: # ‡¶Ø‡¶¶‡¶ø terminate ‡¶ï‡¶æ‡¶ú ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá
                        print("   -> FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ terminate ‡¶π‡ßü‡¶®‡¶ø, SIGKILL ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        process_to_stop.kill() # SIGKILL ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                        process_to_stop.wait() # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá
                        print("   -> FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá (kill)‡•§")
            except Exception as e:
                print(f"‚ö†Ô∏è FFmpeg (PID: {process_to_stop.pid}) ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        elif process_to_stop:
             print("‚ÑπÔ∏è FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶ó‡ßá‡¶≤‡ßã ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶õ‡¶ø‡¶≤‡•§")
        else:
             print("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")

        # ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        if current_ffmpeg_process == process_to_stop:
             current_ffmpeg_process = None


def start_ffmpeg_stream(video_path, loop=False):
    """
    ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá FFmpeg HLS ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡•§
    ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá, ‡¶Ö‡¶°‡¶ø‡¶ì AAC ‡¶§‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§
    """
    global current_ffmpeg_process

    abs_video_path = os.path.abspath(video_path)
    if not os.path.exists(abs_video_path):
        print(f"‚ùå FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {abs_video_path}")
        return None

    # ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    print("   -> ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá) ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    stop_ffmpeg_stream()
    time.sleep(0.2) # ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶®

    # ‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
    print(f"   -> ‡¶™‡ßÅ‡¶∞‡¶®‡ßã HLS ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ({STREAM_OUTPUT_DIR})...")
    try:
        if os.path.exists(STREAM_OUTPUT_DIR):
             for f in os.listdir(STREAM_OUTPUT_DIR):
                 if f.endswith('.ts') or f.endswith('.m3u8'):
                     try:
                         os.remove(os.path.join(STREAM_OUTPUT_DIR, f))
                     except OSError as e:
                         print(f"‚ö†Ô∏è ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        else:
             os.makedirs(STREAM_OUTPUT_DIR, exist_ok=True)
    except Exception as e:
        print(f"‚ö†Ô∏è ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")


    ffmpeg_command_base = [
        'ffmpeg',
        '-re', # ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡¶ü‡¶ø‡¶≠ ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡¶∞‡ßá‡¶ü‡ßá ‡¶™‡ßú‡ßÅ‡¶®
    ]

    # ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶®
    if loop:
        ffmpeg_command_base.extend(['-stream_loop', '-1'])

    ffmpeg_command_base.extend(['-i', abs_video_path])

    # FFmpeg ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏ (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶™‡¶ø, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶è‡¶®‡¶ï‡ßã‡¶°)
    ffmpeg_command_options = [
        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡¶™‡¶ø (‡¶¶‡ßç‡¶∞‡ßÅ‡¶§, ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≤‡¶∏ ‡¶®‡ßá‡¶á)
        '-c:v', 'copy',

        # ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏: ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ AAC ‡¶§‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£)
        '-c:a', 'aac',      # ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡ßã‡¶°‡ßá‡¶ï AAC
        '-b:a', '128k',     # ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶ø‡¶ü‡¶∞‡ßá‡¶ü
        '-ac', '2',         # ‡¶∏‡ßç‡¶ü‡ßá‡¶∞‡¶ø‡¶ì ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤
        '-ar', '44100',     # ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶≤ ‡¶∞‡ßá‡¶ü

        # HLS ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏
        '-f', 'hls',                     # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü HLS
        '-hls_time', '4',                # ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)
        '-hls_list_size', '6',           # ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶¨‡ßá)
        '-hls_flags', 'delete_segments+omit_endlist+program_date_time', # ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®, ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø endlist ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶®, ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        '-hls_segment_filename', os.path.join(STREAM_OUTPUT_DIR, 'segment%05d.ts'), # ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®
        HLS_OUTPUT_FILE                  # ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
    ]

    ffmpeg_command = ffmpeg_command_base + ffmpeg_command_options

    print("üöÄ FFmpeg ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶™‡¶ø):", " ".join(f'"{arg}"' if ' ' in arg else arg for arg in ffmpeg_command)) # ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∏‡¶π ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßã‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

    try:
        # DEVNULL stdout ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶®‡¶æ‡¶≤ ‡¶ï‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
        process = subprocess.Popen(ffmpeg_command, stderr=subprocess.PIPE, stdout=subprocess.DEVNULL)

        # stderr ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶° (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
        def log_stderr(proc, path):
            if proc.stderr:
                try:
                    for line in iter(proc.stderr.readline, b''):
                        if stop_event.is_set(): break
                        line_str = line.decode('utf-8', errors='replace').strip()
                        if line_str:
                             # '-c copy' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶ø‡¶õ‡ßÅ warning ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï, ‡¶Ø‡ßá‡¶Æ‡¶® timestamp ‡¶¨‡¶æ keyframe ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§
                             if 'warning' in line_str.lower() or 'error' in line_str.lower() or 'failed' in line_str.lower():
                                print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                             # else: # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ ‡¶≤‡¶æ‡¶á‡¶® ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶®‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                             #    print(f"  [FFmpeg stderr - {os.path.basename(path)}]: {line_str}")
                except Exception as e:
                     print(f"‚ö†Ô∏è FFmpeg stderr ‡¶™‡ßú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
                finally:
                     if proc.stderr: proc.stderr.close() # stderr ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
            print(f"  [FFmpeg stderr ‡¶∞‡¶ø‡¶°‡¶ø‡¶Ç ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßá‡¶∑ - {os.path.basename(path)}]")

        stderr_thread = threading.Thread(target=log_stderr, args=(process, video_path), daemon=True)
        stderr_thread.start()

        print(f"‚úÖ FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá (PID: {process.pid}) ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: {os.path.basename(video_path)} [‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶™‡¶ø], ‡¶≤‡ßÅ‡¶™: {loop}")
        with stream_lock: # ‡¶≤‡¶ï ‡¶∏‡¶π ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            current_ffmpeg_process = process
        return process

    except FileNotFoundError:
        print(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: 'ffmpeg' ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ FFmpeg ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç PATH ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        with stream_lock: current_ffmpeg_process = None # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ null ‡¶ï‡¶∞‡ßÅ‡¶®
        return None
    except Exception as e:
        print(f"‚ùå FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ({os.path.basename(video_path)}): {e}")
        print("   ‚ÑπÔ∏è ‡¶è‡¶ü‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡ßã‡¶°‡ßá‡¶ï (H.264/AAC ‡¶®‡¶æ?) ‡¶¨‡¶æ HLS ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")
        with stream_lock: current_ffmpeg_process = None # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ null ‡¶ï‡¶∞‡ßÅ‡¶®
        return None

# --- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ---
def stream_manager():
    """
    ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡ßá, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶è‡¶¨‡¶Ç FFmpeg ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡ßá‡•§
    ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â‡¶ï‡ßá ‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶¶‡ßá‡ßü‡•§ ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡ßá‡•§
    ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá‡•§
    ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡•§
    """
    global currently_playing_url, default_video_path, current_ffmpeg_process

    print("‚è≥ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá...")
    temp_default_path = download_video(DEFAULT_VIDEO_URL, DEFAULT_VIDEO_FILENAME)
    if temp_default_path:
         default_video_path = temp_default_path
         print(f"‚úÖ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§: {default_video_path}")
    else:
         print("üö® ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø! ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")

    predownload_attempted_for_url = None # ‡¶ï‡ßã‡¶® URL ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

    while not stop_event.is_set():
        next_video_path = None
        play_url = None
        loop_default = False
        stop_default_and_process_queue = False # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶è‡¶≤‡ßá ‡¶è‡¶ü‡¶ø True ‡¶π‡¶¨‡ßá

        try:
            with stream_lock: # ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶≤‡¶ï ‡¶®‡¶ø‡¶®
                ffmpeg_is_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
                current_url_snapshot = currently_playing_url # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®

                # --- ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶® ‡¶≤‡¶ú‡¶ø‡¶ï ---

                # 1. FFmpeg ‡¶ö‡¶≤‡¶õ‡ßá?
                if ffmpeg_is_running:
                    # 1a. ‡¶ï‡¶ø‡¶â ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶õ‡ßá? ‡¶™‡¶∞‡ßá‡¶∞‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                    if current_url_snapshot != DEFAULT_VIDEO_URL and video_queue:
                        next_url_in_queue = video_queue[0]
                        if next_url_in_queue != predownload_attempted_for_url:
                            print(f"üîé ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {next_url_in_queue[:80]}...")
                            next_filename = get_safe_filename(next_url_in_queue)
                            downloaded_path = download_video(next_url_in_queue, next_filename)
                            if downloaded_path:
                                print(f"üëç ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶¨‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá: {next_filename}")
                            else:
                                print(f"üëé ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {next_url_in_queue[:80]}...")
                            predownload_attempted_for_url = next_url_in_queue # ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®

                    # 1b. ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶è‡¶∏‡ßá‡¶õ‡ßá? ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
                    elif current_url_snapshot == DEFAULT_VIDEO_URL and video_queue:
                        print("üîÑ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        stop_default_and_process_queue = True
                        predownload_attempted_for_url = None # ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü

                    # 1c. ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá (‡¶ï‡¶ø‡¶â ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ì ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø): ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
                    else:
                        # ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                        if current_url_snapshot != DEFAULT_VIDEO_URL and not video_queue:
                            predownload_attempted_for_url = None
                        pass # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®

                # 2. FFmpeg ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ?
                else:
                    predownload_attempted_for_url = None # ‡¶™‡ßç‡¶∞‡¶ø-‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                    # 2a. ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                    if current_ffmpeg_process and current_ffmpeg_process.poll() is not None:
                        print(f"üèÅ FFmpeg (PID: {current_ffmpeg_process.pid}) ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                        if current_url_snapshot and current_url_snapshot != DEFAULT_VIDEO_URL:
                             played_today.add(current_url_snapshot) # ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                        current_ffmpeg_process = None # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                        currently_playing_url = None # URL ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü

                    # 2b. ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶õ‡ßá?
                    if video_queue:
                        play_url = video_queue.popleft() # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ü‡¶ø ‡¶®‡¶ø‡¶®
                        print(f"‚ñ∂Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {play_url[:80]}...")
                        filename = get_safe_filename(play_url)
                        next_video_path = download_video(play_url, filename) # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                        if not next_video_path:
                            print(f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• (‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø): {play_url[:80]}... ‡¶è‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§")
                            play_url = None # ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
                            currently_playing_url = None # URL ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                        else:
                             loop_default = False # ‡¶ï‡¶ø‡¶â ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßÅ‡¶™ ‡¶π‡ßü ‡¶®‡¶æ
                             currently_playing_url = play_url # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® URL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

                    # 2c. ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶õ‡ßá?
                    elif default_video_path:
                        # ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤, ‡¶§‡¶¨‡ßá‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
                        if current_url_snapshot != DEFAULT_VIDEO_URL:
                             print("‚ÑπÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá (‡¶≤‡ßÅ‡¶™ ‡¶∏‡¶π)‡•§")
                        next_video_path = default_video_path
                        play_url = DEFAULT_VIDEO_URL
                        loop_default = True # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßÅ‡¶™ ‡¶π‡¶¨‡ßá
                        currently_playing_url = play_url # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® URL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

                    # 2d. ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡ßá‡¶á?
                    else:
                        if current_url_snapshot: # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤ ‡¶Ü‡¶ó‡ßá
                             print("‚è≥ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        currently_playing_url = None # ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ
                        pass # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®

            # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ---

            # ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡ßü
            if stop_default_and_process_queue:
                print("üõë ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                stop_ffmpeg_stream()
                time.sleep(0.5) # ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶Æ‡ßü
                continue # ‡¶≤‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶® ‡¶™‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá

            # ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
            if next_video_path and play_url:
                print(f"üé¨ FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: {os.path.basename(next_video_path)}, ‡¶≤‡ßÅ‡¶™: {loop_default}")
                started_process = start_ffmpeg_stream(next_video_path, loop=loop_default)
                if not started_process:
                     # FFmpeg ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá, URL ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá
                     with stream_lock:
                         if currently_playing_url == play_url:
                             currently_playing_url = None
                             print(f"‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• URL '{play_url[:80]}...' ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶ó‡ßá‡¶≤‡ßã ‡¶®‡¶æ‡•§")
                 # ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                time.sleep(0.5)

            # --- ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ---
            # FFmpeg ‡¶ö‡¶≤‡¶≤‡ßá ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶∏‡¶Æ‡ßü ‡¶™‡¶∞ ‡¶™‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
            if ffmpeg_is_running:
                 time.sleep(1)
            # FFmpeg ‡¶®‡¶æ ‡¶ö‡¶≤‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            elif not next_video_path:
                 time.sleep(3)
            # ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü (‡¶Ø‡ßá‡¶Æ‡¶®,Âàö ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá) ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            else:
                 time.sleep(0.5)

        except Exception as e:
             print(f"üö®üö® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e} üö®üö®")
             traceback.print_exc() # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
             # ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
             try:
                 stop_ffmpeg_stream()
             except Exception as stop_err:
                  print(f"üö® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶™‡¶∞ FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá‡¶ì ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {stop_err}")
             # ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
             with stream_lock:
                 currently_playing_url = None
                 predownload_attempted_for_url = None
             print("üîÅ ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
             time.sleep(5)

    print("üõë ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    # ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá
    stop_ffmpeg_stream()

# --- Flask Routes ---

# HTML ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú
@app.route('/')
def index():
    return render_template('index.html')

# HTML ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤
@app.route('/admin')
def admin_panel():
    with stream_lock: # ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡¶ì ‡¶≤‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        queue_snapshot = list(video_queue)
        played_snapshot = list(played_today)
        current_url_snapshot = currently_playing_url
        is_ffmpeg_running = current_ffmpeg_process and current_ffmpeg_process.poll() is None
        status_detail = ""
        if is_ffmpeg_running and video_queue:
            next_in_queue = video_queue[0]
            status_detail = f" | ‡¶è‡¶∞‡¶™‡¶∞ ‡¶ï‡¶ø‡¶â‡¶§‡ßá: {next_in_queue[:50]}..."

    if is_ffmpeg_running:
        mode = "[‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶™‡¶ø]" if current_url_snapshot != DEFAULT_VIDEO_URL else "(‡¶≤‡ßÅ‡¶™)"
        if current_url_snapshot == DEFAULT_VIDEO_URL:
            current_status = f"‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá {mode}{status_detail}"
        elif current_url_snapshot:
            current_status = f"‡¶ö‡¶≤‡¶õ‡ßá: {current_url_snapshot[:80]}... {mode}{status_detail}"
        else:
            current_status = "‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá (URL ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ)" # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã‡¶≠‡¶æ‡¶¨‡ßá URL null ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
    else:
        current_status = "‚≠ï ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ö‡¶≤‡¶õ‡ßá ‡¶®‡¶æ"
        if video_queue:
             current_status += f" | ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡ßü: {video_queue[0][:50]}..."

    return render_template('admin.html',
                           queue=queue_snapshot,
                           current_status=current_status,
                           played=played_snapshot)

# HTML ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó
@app.route('/admin/add', methods=['POST'])
def add_video_form():
    url = request.form.get('video_url', '').strip()
    if url:
        if url.startswith('http://') or url.startswith('https://'):
            with stream_lock:
                if url in video_queue:
                     flash(f'"{url[:50]}..." ‡¶è‡¶á URL ‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶õ‡ßá‡•§', 'warning')
                else:
                    video_queue.append(url)
                    print(f"üì• [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url}")
                    flash(f'"{url[:50]}..." ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
            return redirect(url_for('admin_panel'))
        else:
            flash('‡¶Ö‡¶¨‡ßà‡¶ß URL! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá http:// ‡¶¨‡¶æ https:// ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶¶‡¶ø‡¶®‡•§', 'error')
    else:
        flash('URL ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§', 'error')
    return redirect(url_for('admin_panel'))

# HTML ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ
@app.route('/admin/clear_queue', methods=['POST'])
def clear_queue_form():
    with stream_lock:
        if video_queue:
            video_queue.clear()
            print("üóëÔ∏è [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            flash('‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§', 'success')
        else:
             flash('‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤‡•§', 'info')
    return redirect(url_for('admin_panel'))

# HTML ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá '‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ
@app.route('/admin/clear_played', methods=['POST'])
def clear_played_form():
    with stream_lock:
        if played_today:
            played_today.clear()
            print("üóëÔ∏è [‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®] '‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            flash("'‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", 'success')
        else:
             flash("'‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤‡•§", 'info')
    return redirect(url_for('admin_panel'))

# --- ‡¶®‡¶§‡ßÅ‡¶® API Routes ---

# API: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ (GET)
@app.route('/add', methods=['GET'])
def add_video_api():
    url = request.args.get('link', '').strip()
    if not url:
        print("‚ùå [API Add] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: 'link' ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400 # Bad Request

    if not (url.startswith('http://') or url.startswith('https://')):
        print(f"‚ùå [API Add] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶Ö‡¶¨‡ßà‡¶ß URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ({url[:50]}...)")
        return jsonify({'status': 'error', 'message': 'Invalid URL format. Must start with http:// or https://', 'url': url}), 400 # Bad Request

    with stream_lock:
        if url in video_queue:
            print(f"‚ö†Ô∏è [API Add] ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ü‡¶õ‡ßá: {url[:80]}...")
            return jsonify({'status': 'warning', 'message': 'Video already in queue.', 'url': url}), 200 # OK ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç
        else:
            video_queue.append(url)
            print(f"‚úÖ [API Add] ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url[:80]}...")
            return jsonify({'status': 'success', 'message': 'Video added to queue.', 'url': url}), 200 # OK

# API: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (GET)
@app.route('/delete', methods=['GET'])
def delete_video_api():
    link_param = request.args.get('link', '').strip()

    if not link_param:
        print("‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: 'link' ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return jsonify({'status': 'error', 'message': 'Missing "link" parameter.'}), 400 # Bad Request

    with stream_lock:
        # ‡¶ï‡ßá‡¶∏ ‡ßß: ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü (/delete?link=all)
        if link_param.lower() == 'all':
            if video_queue:
                queue_len = len(video_queue)
                video_queue.clear()
                print(f"‚úÖ [API Delete] ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶ø‡¶â ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ({queue_len} ‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶õ‡¶ø‡¶≤)‡•§")
                return jsonify({'status': 'success', 'message': f'Queue cleared. {queue_len} items removed.'}), 200 # OK
            else:
                print("‚ÑπÔ∏è [API Delete] ‡¶ï‡¶ø‡¶â ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤ (link=all)‡•§")
                return jsonify({'status': 'info', 'message': 'Queue was already empty.'}), 200 # OK ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶á‡¶®‡¶´‡ßã

        # ‡¶ï‡ßá‡¶∏ ‡ß®: ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü URL ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü (/delete?link=URL)
        else:
            url_to_delete = link_param
            if not (url_to_delete.startswith('http://') or url_to_delete.startswith('https://')):
                 print(f"‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶¨‡ßà‡¶ß URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ({url_to_delete[:50]}...)")
                 return jsonify({'status': 'error', 'message': 'Invalid URL format for deletion.', 'url': url_to_delete}), 400 # Bad Request

            # ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
            if url_to_delete == currently_playing_url and currently_playing_url != DEFAULT_VIDEO_URL:
                 print(f"‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ ({url_to_delete[:80]}...)")
                 return jsonify({'status': 'error', 'message': 'Cannot delete the currently playing video.', 'url': url_to_delete}), 403 # Forbidden

            # ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
            try:
                # deque ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø remove ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü, ValueError ‡¶¶‡ßá‡ßü ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
                video_queue.remove(url_to_delete)
                print(f"‚úÖ [API Delete] ‡¶ï‡¶ø‡¶â ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {url_to_delete[:80]}...")
                return jsonify({'status': 'success', 'message': 'Video removed from queue.', 'url': url_to_delete}), 200 # OK
            except ValueError:
                # ‡¶Ø‡¶¶‡¶ø URL ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
                print(f"‚ùå [API Delete] ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ({url_to_delete[:80]}...)")
                return jsonify({'status': 'error', 'message': 'Video not found in queue.', 'url': url_to_delete}), 404 # Not Found

# --- HLS ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶® ---
@app.route('/stream/<path:filename>')
def stream(filename):
    stream_abs_path = os.path.abspath(STREAM_OUTPUT_DIR)
    safe_base = os.path.normpath(stream_abs_path)
    file_abs_path = os.path.normpath(os.path.join(safe_base, filename))

    # ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ï ‡¶∞‡ßã‡¶ß
    if not file_abs_path.startswith(safe_base):
        print(f"üö´ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶≤‡¶ô‡ßç‡¶ò‡¶® ‡¶™‡ßç‡¶∞‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {filename}")
        abort(403) # Forbidden

    # ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶∏‡¶≤‡ßá‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    if not os.path.isfile(file_abs_path):
        # print(f"üîç ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {file_abs_path}") # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá 404 ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï, ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶≤‡ßá
        abort(404) # Not Found

    try:
        response = send_from_directory(safe_base, filename, conditional=True)
        # ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£)
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        return response

    except FileNotFoundError:
         # send_from_directory ‡¶®‡¶ø‡¶ú‡ßá‡¶ì FileNotFoundError ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
         abort(404)
    except Exception as e:
        print(f"‚ùå ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({filename}): {e}")
        abort(500) # Internal Server Error

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
def signal_handler(sig, frame):
    if stop_event.is_set():
        print("‚è≥ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá...")
        return
    print("\nüö¶ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá (Ctrl+C)...")
    stop_event.set() # ‡¶∏‡¶¨ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶§‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®
    print("‚è≥ FFmpeg ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    time.sleep(0.5) # ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá

    # ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ö‡¶≤‡ßá
    print("üö¶ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
    stop_ffmpeg_stream() # ‡¶è‡¶ü‡¶ø ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú ‡¶≤‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá

    print("üëã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    # os._exit(0) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶†‡¶ø‡¶ï‡¶Æ‡¶§‡ßã ‡¶¨‡¶®‡ßç‡¶ß ‡¶®‡¶æ ‡¶π‡ßü
    exit(0)

# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶≤‡¶ï ---
if __name__ == '__main__':
    print("*"*60)
    print("üöÄ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    print("   ‚ú® ‡¶Æ‡ßã‡¶°: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶™‡¶ø, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶è‡¶®‡¶ï‡ßã‡¶°")
    print(f"‚è∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÇ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø: {os.path.abspath(VIDEO_DIR)}")
    print(f"üì∫ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø: {os.path.abspath(STREAM_OUTPUT_DIR)}")
    print("*"*60)

    # ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (Ctrl+C ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler) # SIGTERM ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏

    # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    manager_thread = threading.Thread(target=stream_manager, name="StreamManager", daemon=True)
    manager_thread.start()

    host = '0.0.0.0' # ‡¶∏‡¶¨ ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏‡ßá ‡¶∂‡ßÅ‡¶®‡ßÅ‡¶®
    port = 5000
    print(f"üåç Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ http://{host}:{port} ‡¶è ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§...")
    print(f"üîë HTML ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: http://127.0.0.1:{port}/admin")
    print(f"üëÄ ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®: http://127.0.0.1:{port}/")
    print(f"‚öôÔ∏è API Endpoints:")
    print(f"   - ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (GET): http://127.0.0.1:{port}/add?link=VIDEO_URL")
    print(f"   - ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (GET): http://127.0.0.1:{port}/delete?link=VIDEO_URL")
    print(f"   - ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶â ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (GET): http://127.0.0.1:{port}/delete?link=all")
    print("\nüõë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá Ctrl+C ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")

    try:
        # threaded=True Flask ‡¶ï‡ßá ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶° ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá
        # use_reloader=False ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç‡ßü‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá, ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
        # debug=False ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶Æ‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
        app.run(host=host, port=port, threaded=True, use_reloader=False, debug=False)
    except Exception as e:
        print(f"Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        traceback.print_exc()
    finally:
        print("\nFlask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶π‡¶§‡ßá ‡¶ö‡¶≤‡ßá‡¶õ‡ßá...")
        if not stop_event.is_set():
            print("   -> stop_event ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            stop_event.set() # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá

        # ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶®
        if manager_thread.is_alive():
            print("   -> ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ï‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§)...")
            manager_thread.join(timeout=10)
            if manager_thread.is_alive():
                 print("‚ö†Ô∏è ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡¶®‡¶ø‡•§")

        print("   -> ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá FFmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
        stop_ffmpeg_stream() # ‡¶∂‡ßá‡¶∑‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ffmpeg ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá

        print("üëã ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§‡•§")
